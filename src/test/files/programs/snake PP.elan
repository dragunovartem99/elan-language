# 4a535eae0675ccdd9007a5d54fa0af87475774fbae64ab4cc8095d75cd598d84 Elan Beta 1 valid

main
  var gr set to new Graphics()
  var head set to [20, 15]
  var snake set to [head]
  var priorTail set to head
  var apple set to [0, 0]
  call randomNewApplePosition(apple, snake)
  var currentDirection set to "right"
  var gameOn set to true
  while gameOn
    set gr to gr.putBackground(head[0], head[1], green)
    if snake[0] isnt priorTail
      then
        set gr to gr.putBackground(priorTail[0], priorTail[1], white)
    end if
    set gr to gr.putBackground(apple[0], apple[1], red)
    call gr.draw()
    var k set to gr.getKeystroke()
    if k isnt ""
      then
        set currentDirection to directionbyKey(k)
    end if
    set priorTail to snake[0]
    call snake.add(head)
    set head to getAdjacentSquare(head, currentDirection)
    if head is apple
      then
        call randomNewApplePosition(apple, snake)
      else
        set snake to snake[1..]
    end if
    set gameOn to not clashes(snake, head) and not hasHitEdge(head)
    call pause(150)
  end while
  print "Game Over! Score: {snake.length() - 1}"
end main

procedure randomNewApplePosition(apple as [Int], snake as [[Int]])
  repeat
    set apple[0] to randomInt(0, 39)
    set apple[1] to randomInt(0, 29)
  end repeat when not clashes(snake, apple)
end procedure

function hasHitEdge(head as [Int]) return Boolean
  return (head[0] < 0) or (head[1] < 0) or (head[0] > 39) or (head[1] > 29)
end function

function getAdjacentSquare(sq as [Int], dir as String) return [Int]
  var newX set to sq[0]
  var newY set to sq[1]
  switch dir
    case "left"
      set newX to newX - 1
    case "right"
      set newX to newX + 1
    case "up"
      set newY to newY - 1
    case "down"
      set newY to newY + 1
  end switch
  return [newX, newY]
end function

function clashes(snake as [[Int]], sq as [Int]) return Boolean
  var result set to false
  each seg in snake
    if (seg is sq)
      then
        set result to true
    end if
  end each
  return result
end function

function directionbyKey(key as String) return String
  var dir set to ""
  switch key
    case "w"
      set dir to "up"
    case "s"
      set dir to "down"
    case "a"
      set dir to "left"
    case "d"
      set dir to "right"
  end switch
  return dir
end function

constant green set to 0x00ff00

constant red set to 0xff0000

constant white set to 0xffffff

# 59903f65176cdc064d8e09d2d4777e1015f308822b0c712d285dc039c825ab59 Elan Beta 9 valid

main
  variable gr set to new BlockGraphics()
  variable grid set to empty List<of Boolean>
  call fillRandom(grid)
  while true
    set gr to updateGraphics(grid, gr)
    call gr.display()
    set grid to nextGeneration(grid)
    call pause(50)
  end while
end main

procedure fillRandom(out starter as List<of Boolean>)
  for i from 0 to 1199 step 1
    call starter.append(random() > 0.5)
  end for
end procedure

function updateGraphics(grid as List<of Boolean>, gr as BlockGraphics) returns BlockGraphics
  variable gr2 set to gr
  for row from 0 to 29 step 1
    for col from 0 to 39 step 1
      let cell be grid[row*40 + col]
      let colour be if cell then black else white
      set gr2 to gr2.withBlock(col, row, colour)
    end for
  end for
  return gr2
end function

function north(c as Int) returns Int
  return if c > 39 then c - 40 else c + 1160
end function

function south(c as Int) returns Int
  return if c < 1160 then c + 40 else c - 1160
end function

function east(c as Int) returns Int
  return if (c mod 40) < 39 then c + 1 else c - 39
end function

function west(c as Int) returns Int
  return if (c mod 40) > 0 then c - 1 else c + 39
end function

function neighbourCells(c as Int) returns List<of Int>
  return [north(west(c)), north(c), north(east(c)), west(c), east(c), south(west(c)), south(c), south(east(c))]
end function

function liveNeighbours(cells as List<of Boolean>, c as Int) returns Int
  let neighbours be neighbourCells(c)
  let live be neighbours.filter(lambda i as Int => cells[i])
  return live.length()
end function

function willLive(currentlyAlive as Boolean, live as Int) returns Boolean
  return if currentlyAlive then (live > 1) and (live < 4) else live is 3
end function

function nextCellValue(cells as List<of Boolean>, c as Int) returns Boolean
  return willLive(cells[c], liveNeighbours(cells, c))
end function

function nextGeneration(cells as List<of Boolean>) returns List<of Boolean>
  let cellRange be range(0, cells.length() - 1)
  let next be cellRange.map(lambda n as Int => nextCellValue(cells, n))
  return next.asList()
end function

constant black set to 0x000000

constant white set to 0xffffff

test north
  assert north(90) is 50
  assert north(39) is 1199
  assert north(0) is 1160
  assert north(40) is 0
end test

test south
  assert south(90) is 130
  assert south(39) is 79
  assert south(1160) is 0
  assert south(1199) is 39
end test

test east
  assert east(90) is 91
  assert east(39) is 0
  assert east(40) is 41
  assert east(1199) is 1160
end test

test 
  assert west(90) is 89
  assert west(39) is 38
  assert west(0) is 39
  assert west(1160) is 1199
end test

test north_east
  assert north(east(90)) is 51
  assert north(east(0)) is 1161
  assert north(east(39)) is 1160
  assert north(east(1160)) is 1121
  assert north(east(1199)) is 1120
end test

test 
  assert south(east(90)) is 131
  assert south(east(0)) is 41
  assert south(east(39)) is 40
  assert south(east(1160)) is 1
  assert south(east(1199)) is 0
end test

test 
  assert north(west(90)) is 49
  assert north(west(0)) is 1199
  assert north(west(39)) is 1198
  assert north(west(1160)) is 1159
  assert north(west(1199)) is 1158
end test

test 
  assert south(west(90)) is 129
  assert south(west(0)) is 79
  assert south(west(39)) is 78
  assert south(west(1160)) is 39
  assert south(west(1199)) is 38
end test

test 
  assert neighbourCells(90) is [49, 50, 51, 89, 91, 129, 130, 131]
end test

test 
  assert willLive(false, 0) is false
  assert willLive(false, 1) is false
  assert willLive(false, 2) is false
  assert willLive(false, 3) is true
  assert willLive(false, 4) is false
  assert willLive(false, 5) is false
  assert willLive(false, 6) is false
  assert willLive(false, 7) is false
  assert willLive(false, 8) is false
  assert willLive(true, 0) is false
  assert willLive(true, 1) is false
  assert willLive(true, 2) is true
  assert willLive(true, 3) is true
  assert willLive(true, 4) is false
  assert willLive(true, 5) is false
  assert willLive(true, 6) is false
  assert willLive(true, 7) is false
  assert willLive(true, 8) is false
end test

# d396c68c436860e6b10671d4f3b718f690093c3196645ba9f27f4949b0a8878f Elan 0.10.0-Beta guest default_profile valid

# A program to investigate the Collatz Conjecture
# https://en.wikipedia.org/wiki/Collatz_conjecture
main
  variable x set to 1
  while x > 0
    set x to inputInt("Enter a starting number (0 to quit)")
    # Array of the values we have seen so far
    let p be [x]
    # record the max value so we can scale the graph
    variable max set to x
    while x > 1
      # Collatz sequence
      if (x mod 2) is 0 then
        # div always produces an Int result
        set x to x div 2
      else
        set x to x*3 + 1
      end if
      if x > max then
        set max to x
      end if
      call p.append(x)
      # draw what we have got so far, scaled to the canvas
      variable vg set to new List<of VectorGraphic>()
      for i from 0 to p.length() - 2 step 1
        set vg to vg.withAppend(new LineVG(scx(i, p), scy(p[i], max), scx(i + 1, p), scy(p[i + 1], max), black, 1))
      end for
      call displayVectorGraphics(vg)
      print x
      call pause(100)
    end while
  end while
  print "Finished"
end main

# scale x.  We pass in p just to get its length
function scx(i as Int, p as List<of Int>) returns Float
  return i*100/p.length()
end function

# scale y
# subtract from 70 because y increases down the canvas
# subtract 1 so that 1 is always at the same place on the canvas
function scy(pi as Int, max as Int) returns Float
  return 70 - ((pi - 1)*65/(max - 1))
end function

constant grey set to 0x808080

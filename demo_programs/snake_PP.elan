# 3282b207a9149f403b5e438b4c3794201c058fc65de6728aed7150475db7740d Elan Beta 5 valid

# Use the W,A,S,D keys to change Snake direction
main
  variable gr set to new BlockGraphics()
  variable head set to [20, 15]
  variable tail set to head
  variable body set to [head]
  variable currentDir set to "right"
  variable gameOn set to true
  variable apple set to [0, 0]
  call setAppleToRandomPosition(apple, body)
  while gameOn
    set gr to updateGraphics(gr, head, tail, body, apple)
    call gr.display()
    set currentDir to directionByKey(currentDir, getKey())
    set tail to body[0]
    call body.append(head)
    set head to getAdjacentSquare(head, currentDir)
    set gameOn to not hasHitEdge(head) and not overlaps(body, head)
    call eatAppleIfPoss(head, body, apple)
    call pause(150)
  end while
  print "Game Over! Score: {body.length() - 1}"
end main

procedure setAppleToRandomPosition(out apple as Array<of Int>, body as Array<of Array<of Int>>)
  repeat
    call apple.putAt(0, randomInt(0, 39))
    call apple.putAt(1, randomInt(0, 29))
  end repeat when not overlaps(body, apple)
end procedure

procedure eatAppleIfPoss(head as Array<of Int>, out body as Array<of Array<of Int>>, apple as Array<of Int>)
  if head is apple then
    call setAppleToRandomPosition(apple, body)
  else
    call body.removeAt(0)
  end if
end procedure

function updateGraphics(gr as BlockGraphics, head as Array<of Int>, tail as Array<of Int>, body as Array<of Array<of Int>>, apple as Array<of Int>) returns BlockGraphics
  variable gr2 set to gr.withBlock(head[0], head[1], green)
  if body[0] is tail then
    set gr2 to gr2.withBlock(tail[0], tail[1], green)
  else
    set gr2 to gr2.withBlock(tail[0], tail[1], white)
  end if
  set gr2 to gr2.withBlock(apple[0], apple[1], red)
  return gr2
end function

function hasHitEdge(head as Array<of Int>) returns Boolean
  return (head[0] < 0) or (head[1] < 0) or (head[0] > 39) or (head[1] > 29)
end function

function getAdjacentSquare(sq as Array<of Int>, dir as String) returns Array<of Int>
  variable newX set to sq[0]
  variable newY set to sq[1]
  switch on dir
    match "left" with
    set newX to newX - 1
    match "right" with
    set newX to newX + 1
    match "up" with
    set newY to newY - 1
    match "down" with
    set newY to newY + 1
  end switch
  return [newX, newY]
end function

function overlaps(body as Array<of Array<of Int>>, sq as Array<of Int>) returns Boolean
  variable result set to false
  each seg in body
    if (seg is sq) then
      set result to true
    end if
  end each
  return result
end function

function directionByKey(current as String, key as String) returns String
  variable dir set to current
  switch on key
    match "w" with
    set dir to "up"
    match "s" with
    set dir to "down"
    match "a" with
    set dir to "left"
    match "d" with
    set dir to "right"
    otherwise
  end switch
  return dir
end function

# 73 frames (excluding tests)
test updateGraphicsOneSegmentBody
  variable gr set to new BlockGraphics()
  let head be [20, 15]
  let tail be [20, 15]
  let body be [head]
  let apple be [6, 7]
  set gr to updateGraphics(gr, head, tail, body, apple)
  # First check the default (by looking at top-left block)
  assert gr.getBackground(0, 0) is white
  # test apple
  assert gr.getBackground(6, 7) is red
  # test snake is just one block by checking all around
  assert gr.getBackground(20, 15) is green
  assert gr.getBackground(19, 15) is white
  assert gr.getBackground(21, 15) is white
  assert gr.getBackground(20, 14) is white
  assert gr.getBackground(20, 16) is white
end test

test updateGraphicsLongerBody3SegmentBody
  variable gr set to new BlockGraphics()
  # draw existing 2-seg snake
  set gr to gr.withBlock(30, 20, green).withBlock(30, 21, green).withBlock(30, 22, green)
  # define snake's new position
  let head be [30, 23]
  let tail be [30, 20]
  let body be [[30, 21], [30, 22], head]
  let apple be [0, 0]
  set gr to updateGraphics(gr, head, tail, body, apple)
  # test snake is just one block by checking all around
  assert gr.getBackground(30, 20) is white
  assert gr.getBackground(30, 21) is green
  assert gr.getBackground(30, 22) is green
  assert gr.getBackground(30, 23) is green
end test

test hasHitEdge
  assert hasHitEdge([0, 0]) is false
  assert hasHitEdge([0, 29]) is false
  assert hasHitEdge([39, 0]) is false
  assert hasHitEdge([29, 29]) is false
  assert hasHitEdge([-1, 5]) is true
  assert hasHitEdge([5, 30]) is true
  assert hasHitEdge([40, 5]) is true
  assert hasHitEdge([5, -1]) is true
end test

test getAdjacentSquare
  let sq be [20, 15]
  assert getAdjacentSquare(sq, "up") is [20, 14]
  assert getAdjacentSquare(sq, "down") is [20, 16]
  assert getAdjacentSquare(sq, "left") is [19, 15]
  assert getAdjacentSquare(sq, "right") is [21, 15]
  # boundary
  assert getAdjacentSquare([0, 15], "left") is [-1, 15]
end test

test directionByKey
  let current be "up"
  assert directionByKey(current, "") is "up"
  assert directionByKey(current, "x") is "up"
  assert directionByKey(current, "w") is "up"
  assert directionByKey(current, "s") is "down"
  assert directionByKey(current, "a") is "left"
  assert directionByKey(current, "d") is "right"
  assert directionByKey(current, "D") is "up"
end test

test overlaps
  let body be [[1, 2], [3, 4]]
  assert overlaps(body, [1, 2]) is true
  assert overlaps(body, [3, 4]) is true
  assert overlaps(body, [1]) is false
  assert overlaps(body, [2, 1]) is false
end test

# Test coverage: 59% (43/73 frames)

# f31a3d59e4d0b53c8384a195ad3bb18b16b24595fa5527e209447ca74fafcae8 Elan Beta 9 valid

# Demo shows one way to implement a mergeSort function - using recursion
# Since merge sort is always an 'out of place' sort, we have chosen to use immutable lists
# It could be written with mutable lists, but the code for the merge function would need changing
main
  print mergeSort(fruit)
end main

function mergeSort(li as ListImmutable<of String>) returns ListImmutable<of String>
  variable result set to li
  let len be li.length()
  if len > 1 then
    let mid be (len/2).floor()
    let frontHalf be mergeSort(li[..mid])
    let backHalf be mergeSort(li[mid..])
    set result to merge(frontHalf, backHalf)
  end if
  return result
end function

function merge(a as ListImmutable<of String>, b as ListImmutable<of String>) returns ListImmutable<of String>
  variable result set to empty ListImmutable<of String>
  let aLen be a.length()
  let bLen be b.length()
  if a.length() is 0 then
    set result to b
  else if bLen is 0 then
    set result to a
  else if a[0].isBefore(b[0]) then
    set result to {a[0]} + merge(a[1..], b)
  else
    set result to {b[0]} + merge(a, b[1..])
  end if
  return result
end function

test mergeSort
  let li1 be empty ListImmutable<of String>
  assert mergeSort(li1) is li1
  let li2 be {"plum"}
  assert mergeSort(li2) is li2
  let li3 be {"plum", "apricot", "lime", "lemon", "melon", "apple", "orange", "strawberry", "pear"}
  let sorted3 be {"apple", "apricot", "lemon", "lime", "melon", "orange", "pear", "plum", "strawberry"}
  assert mergeSort(li3) is sorted3
  let li4 be {"plum", "apricot", "lime", "lemon", "melon", "apple", "orange", "strawberry"}
  let sorted4 be {"apple", "apricot", "lemon", "lime", "melon", "orange", "plum", "strawberry"}
  assert mergeSort(li4) is sorted4
  let li5 be {"apple", "apricot", "lemon", "lime", "melon", "orange", "pear", "strawberry"}
  assert mergeSort(li5) is li5
end test

constant fruit set to {"plum", "apricot", "lime", "lemon", "melon", "apple", "orange", "strawberry", "pear"}

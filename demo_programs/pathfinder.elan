# FFFF Elan Beta 6 valid

main
  let start be new Point(5, 5)
  let destination be new Point(34, 24)
  let percentRocks be inputIntBetween("Enter % rocks (0-100): ", 0, 100)
  variable rocks set to empty Array<of Point>
  variable nodes set to empty Array<of Node>
  call createRocksAndNodes(percentRocks, rocks, nodes, start, destination)
  variable gr set to initialiseGraphics(start, destination, rocks)
  call gr.display()
  variable solver set to new Solver(nodes, start, destination)
  while true
    let option be inputString(algPrompt)
    let alg be algFromLetter[option]
    call runSolver(gr, start, destination, rocks, solver, alg)
  end while
end main

procedure runSolver(gr as BlockGraphics, start as Point, destination as Point, rocks as Array<of Point>, out solver as Solver, alg as Algorithm)
  call solver.initialise(alg)
  variable gr2 set to initialiseGraphics(start, destination, rocks)
  while solver.running
    call solver.visitNextPoint()
    set gr2 to addVisited(gr2, solver.getLastVisited())
    call gr2.display()
    call pause(0)
  end while
  if solver.getLastVisited() is destination then
      let route, length be solver.getRouteAndLength()
      set gr2 to addRoute(gr2, route)
      call gr2.display()
      print "Length of route: {round(length, 2)}"
  else
      print "No route from start to destination found through these rocks."
  end if
end procedure

procedure createRocksAndNodes(percentRocks as Int, out rocks as Array<of Point>, out nodes as Array<of Node>, start as Point, dest as Point)
  for x from 0 to 39 step 1
    for y from 0 to 29 step 1
      let p be new Point(x, y)
      if p is start then
          call nodes.append(new Node(p, 0, p.minDistTo(dest)))
      else if p is dest then
          call nodes.append(new Node(p, infinity, 0))
      else if random() < percentRocks/100 then
          call rocks.append(p)
      else
          call nodes.append(new Node(p, infinity, p.minDistTo(dest)))
      end if
    end for
  end for
end procedure

function initialiseGraphics(start as Point, dest as Point, rocks as Array<of Point>) returns BlockGraphics
  variable gr set to new BlockGraphics()
  each rock in rocks
    set gr to gr.withBlock(rock.x, rock.y, black)
  end each
  set gr to gr.withBlock(start.x, start.y, green)
  set gr to gr.withBlock(dest.x, dest.y, red)
  return gr
end function

function addVisited(gr as BlockGraphics, visited as Point) returns BlockGraphics
  return gr.withBlock(visited.x, visited.y, lightBlue)
end function

function addRoute(gr as BlockGraphics, route as List<of Point>) returns BlockGraphics
  variable gr2 set to gr
  each p in route
    set gr2 to gr2.withBlock(p.x, p.y, orange)
  end each
  let start be route[0]
  let dest be route[route.length() - 1]
  set gr2 to gr2.withBlock(start.x, start.y, green)
  set gr2 to gr2.withBlock(dest.x, dest.y, red)
  return gr2
end function

class Solver
  constructor(nodes as Array<of Node>, start as Point, destination as Point)
    set property.nodes to nodes
    set property.start to start
    set property.destination to destination
  end constructor

  property nodes as Array<of Node>

  property start as Point

  property destination as Point

  property current as Node

  property alg as Algorithm

  property running as Boolean

  procedure initialise(alg as Algorithm)
    set property.alg to alg
    set property.current to new Node(start, 0, infinity)
    set property.running to true
    each node in nodes
      call node.setDistanceFromStart(infinity)
      call node.setVia(empty Point)
      call node.setVisited(false)
    end each
  end procedure

  procedure visitNextPoint()
    call updateNeighbours()
    set property.current to nextNodeToVisit()
    if (current is empty Node) or (current.point is destination) then
        set running to false
    else
        call current.setVisited(true)
    end if
  end procedure

  procedure updateNeighbours()
    let distToCurrent be current.distFromStart
    each neighbour in currentNeighbours()
      let currentPoint be current.point
      let distViaCurrent be distToCurrent + currentPoint.minDistTo(neighbour.point)
      if distViaCurrent < neighbour.distFromStart then
          call neighbour.setVia(current.point)
          call neighbour.setDistanceFromStart(distViaCurrent)
      end if
    end each
  end procedure

  function currentNeighbours() returns Array<of Node>
    variable neighbours set to empty List<of Node>
    let currentPoint be current.point
    each p in currentPoint.neighbouringPoints()
      let node be getNodeFor(p)
      let point be node.point
      if point.isNotEmpty then
          set neighbours to neighbours + node
      end if
    end each
    return neighbours.asArray()
  end function

  function getNodeFor(p as Point) returns Node
    let matches be nodes.filter(lambda n as Node => n.point is p)
    return if matches.length() is 1 then matches.head() else empty Node
  end function

  function getLastVisited() returns Point
    return current.point
  end function

  function nextNodeToVisit() returns Node
    variable lowestCostSoFar set to infinity
    variable lowestCostNode set to empty Node
    let possibilities be nodes.filter(lambda nd as Node => (not nd.visited) and (nd.distFromStart < infinity))
    each nd in possibilities
      let cost be calculateCost(nd)
      if cost < lowestCostSoFar then
          set lowestCostSoFar to cost
          set lowestCostNode to nd
      end if
    end each
    return lowestCostNode
  end function

  function calculateCost(node as Node) returns Float
    variable cost set to 0.0
    let fromStart be node.distFromStart
    let estToDest be node.estDistToDest
    switch on alg
    match Algorithm.dijkstra with
      set cost to fromStart
    match Algorithm.aStar with
      set cost to fromStart + estToDest
    match Algorithm.heuristic with
      set cost to estToDest
    end switch
    return cost
  end function

  function getRouteAndLength() returns (List<of Point>, Float)
    variable route set to {destination}
    variable length set to 0.0
    variable node set to getNodeFor(destination)
    repeat
      let previous be node.via
      let p be node.point
      set length to length + p.minDistTo(previous)
      set route to route.withInsert(0, previous)
      set node to getNodeFor(previous)
    end repeat when node.point is start
    return (route, length)
  end function

end class

class Node
  constructor(p as Point, distFromStart as Float, estDistToDest as Float)
    set property.point to p
    set property.visited to false
    set property.distFromStart to distFromStart
    set property.via to empty Point
    set property.estDistToDest to estDistToDest
  end constructor

  property point as Point

  property visited as Boolean

  property distFromStart as Float

  property via as Point

  property estDistToDest as Float

  procedure setVisited(value as Boolean)
    set property.visited to value
  end procedure

  procedure setDistanceFromStart(d as Float)
    set property.distFromStart to d
  end procedure

  procedure setVia(p as Point)
    set property.via to p
  end procedure

end class

class Point
  constructor(x as Int, y as Int)
    set property.x to x
    set property.y to y
    # isNotEmpty is needed to distinguish Point(0,0) from empty Point, which will also have zero values
    set property.isNotEmpty to true
  end constructor

  property x as Int

  property y as Int

  property isNotEmpty as Boolean

  function minDistTo(p as Point) returns Float
    return sqrt((p.x - x)^2 + (p.y - y)^2)
  end function

  function isAdjacentTo(p as Point) returns Boolean
    return (minDistTo(p) is 1) or round(minDistTo(p), 4) is round(sqrt(2), 4)
  end function

  # Returns the 8 theoretically-neighbouring points, whether or not within bounds
  function neighbouringPoints() returns List<of Point>
    return {new Point(x - 1, y - 1), new Point(x, y - 1), new Point(x + 1, y - 1), new Point(x - 1, y), new Point(x + 1, y), new Point(x - 1, y + 1), new Point(x, y + 1), new Point(x + 1, y + 1)}
  end function

end class

enum Algorithm dijkstra, aStar, heuristic

# 'infinity' need only be larger than longest possible route
constant infinity set to 2000.0

constant algFromLetter set to {"a":Algorithm.aStar, "d":Algorithm.dijkstra, "h":Algorithm.heuristic}

constant algPrompt set to "\n'a' for A-star \n'd' for Dijkstra \n'h' for Heuristic \nEnter option: "

constant lightBlue set to 0x80abff

constant orange set to 0xe97132

test point
  let p be new Point(0, 0)
  let n be p.neighbouringPoints()
  let expected be {new Point(-1, -1), new Point(0, -1), new Point(1, -1), new Point(-1, 0), new Point(1, 0), new Point(-1, 1), new Point(0, 1), new Point(1, 1)}
  assert n is expected
end test

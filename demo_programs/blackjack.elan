# 5e16038b4f8c9c4c48e5e70aff9cab20aa04cd925c6308e479fce8c66e71b00e Elan Beta 6 valid

main
  call simulation()
end main

procedure game()
  variable dealer set to new Dealer(1000)
  variable player set to new HumanPlayer(1000)
  variable gameNo set to 0
  variable cont set to true
  while cont
    call clearConsole()
    call player.newHand()
    call dealer.newHand()
    call displayHands(dealer, player)
    call playersTurn(dealer, player)
    call pause(2000)
    call dealersTurn(dealer, player)
    let outcome be determineOutcome(dealer, player)
    print "You {outcome}"
    call updateScores(dealer, player, outcome)
    print "Game: {gameNo} Dealer score: {dealer.score} Player score: {player.score}"
    let prompt be "Enter p for play again, x for exit:"
    let inp be inputStringFromOptions(prompt, ["p", "x"])
    set cont to inp isnt "x"
  end while
end procedure

procedure analyser()
  let outcomes be [Status.bust:0, Status.standing:0, Status.blackjack:0]
  let dealer be new Dealer(1000)
  for i from 1 to 10000 step 1
    call dealer.newHand()
    call dealer.start()
    call dealer.playHandOut()
    let status be dealer.hand.status
    call outcomes.putAtKey(status, outcomes[status] + 1)
  end for
  print outcomes
end procedure

procedure simulation()
  variable dealer set to new Dealer(1000)
  variable playerA set to new AutomatedPlayer("PlayerA", ref strategyA, 1000)
  variable playerB set to new AutomatedPlayer("PlayerB", ref strategyB, 1000)
  for i from 1 to 1000 step 1
    call dealer.newHand()
    let face be dealer.faceCard
    call playerA.newHand()
    call playerA.playHandOut(face)
    call playerB.newHand()
    call playerB.playHandOut(face)
    call dealer.playHandOut()
    let outcomeA be determineOutcome(dealer, playerA)
    call updateScores(dealer, playerA, outcomeA)
    let outcomeB be determineOutcome(dealer, playerB)
    call updateScores(dealer, playerB, outcomeB)
    if outcomeB isnt Outcome.lose then
      print playerB
    end if
  end for
  print "Dealer score: {dealer.score}"
  print "{playerA.name} score: {playerA.score}"
  print "{playerB.name} score: {playerB.score}"
end procedure

procedure dealersTurn(dealer as Dealer, player as HumanPlayer)
  call dealer.start()
  call displayHands(dealer, player)
  call pause(2000)
  while dealer.hand.status is Status.playing
    call dealer.nextMove()
    call displayHands(dealer, player)
    call pause(1000)
  end while
end procedure

procedure playersTurn(dealer as Dealer, player as HumanPlayer)
  while player.isPlaying()
    call player.nextMove()
    call displayHands(dealer, player)
  end while
end procedure

procedure displayHands(dealer as Dealer, player as HumanPlayer)
  call clearConsole()
  print dealer
  print player
end procedure

procedure updateScores(dealer as Dealer, player as Player, outcome as Outcome)
  if outcome is Outcome.win then
    call player.changeScoreBy(1)
    call dealer.changeScoreBy(-1)
  else if outcome is Outcome.lose then
    call player.changeScoreBy(-1)
    call dealer.changeScoreBy(1)
  end if
end procedure

# TODO This is not correct. It is not giving extra payout for BJ. 
# Get rid out outcome & revert to returing a + or -integer.
function determineOutcome(dealer as Dealer, player as Player) returns Outcome
  let d be dealer.hand.status
  let dTot be dealer.hand.total
  let p be player.hand.status
  let pTot be player.hand.total
  let bust be Status.bust
  let bj be Status.blackjack
  let win be Outcome.win
  let lose be Outcome.lose
  let draw be Outcome.draw
  return if p is bust then lose else if d is bust then win else if (d is bj) and (p is bj) then draw else if p is bj then win else if d is bj then draw else if pTot > dTot then win else if pTot < dTot then lose else draw
end function

function dealCard(random as Float) returns Card
  let number be floor(random*52)
  let rank be rankValue.keys()[number div 4]
  let suit be number mod 4
  return new Card(rank, suit)
end function

class Dealer
  constructor(startingPoints as Int)
    set property.score to startingPoints
  end constructor

  property score as Int

  property hand as Hand

  property faceCard as Card

  private property active as Boolean

  procedure playHandOut()
    call start()
    while hand.status is Status.playing
      call nextMove()
    end while
  end procedure

  procedure newHand()
    set property.active to false
    set property.hand to new Hand()
    call hand.draw()
    set property.faceCard to hand.cards[0]
    call hand.draw()
  end procedure

  procedure changeScoreBy(amount as Int)
    set property.score to score + amount
  end procedure

  procedure nextMove()
    let decision be getDecision()
    if getDecision() is Action.draw then
      call hand.draw()
    else
      call hand.stand()
    end if
  end procedure

  procedure start()
    set property.active to true
  end procedure

  function getDecision() returns Action
    return if hand.total < 17 then Action.draw else Action.stand
  end function

  function asString() returns String
    return if active then "Dealer: {hand}" else "Dealer: {faceCard} {unicode(9633)}"
  end function

end class

abstract class Player
  abstract property hand as Hand

  abstract procedure changeScoreBy(amount as Int)

end class

class HumanPlayer inherits Player
  constructor(startingPoints as Int)
    set property.score to startingPoints
  end constructor

  property score as Int

  property hand as Hand

  procedure newHand()
    set property.hand to new Hand()
    call hand.draw()
    call hand.draw()
    call hand.setStatus(Status.playing)
  end procedure

  function isPlaying() returns Boolean
    return hand.status is Status.playing
  end function

  procedure nextMove()
    let inp be inputStringFromOptions("Enter s to stand, d to draw card:", ["s", "d"])
    if inp is "d" then
      call hand.draw()
    else
      call hand.stand()
    end if
  end procedure

  procedure changeScoreBy(amount as Int)
    set property.score to score + amount
  end procedure

  function asString() returns String
    return "You: {hand}"
  end function

end class

class AutomatedPlayer inherits Player
  constructor(name as String, decisionFunc as Func<of Hand, Card => Action>, startingPoints as Int)
    set property.name to name
    set property.decisionFunc to ref decisionFunc
    set property.score to startingPoints
  end constructor

  property hand as Hand

  property score as Int

  property name as String

  private property dealerFaceCard as Card

  property decisionFunc as Func<of Hand, Card => Action>

  procedure changeScoreBy(amount as Int)
    set property.score to score + amount
  end procedure

  function getDecision() returns Action
    return decisionFunc(property.hand, property.dealerFaceCard)
  end function

  # 
  procedure playHandOut(dealerFaceCard as Card)
    set property.dealerFaceCard to dealerFaceCard
    while property.hand.status is Status.playing
      let decision be getDecision()
      if decision is Action.draw then
        call hand.draw()
      else if decision is Action.stand then
        call hand.stand()
      else
        throw exception "Action {decision} not covered"
        # TODO: cover other cases, which must check that they are valid given hand 
      end if
    end while
  end procedure

  procedure newHand()
    # scope for delegating 
    set property.hand to new Hand()
    call hand.draw()
    call hand.draw()
  end procedure

  # TODO If dealer is pending rather than playing, then show only face card + 'hidden card' (or correct term)
  function asString() returns String
    return "{name}: {hand}"
  end function

end class

class Hand
  property softAce as Boolean

  property cards as List<of Card>

  property count as Int

  property total as Int

  property status as Status

  function isPairOf8s() returns Boolean
    return (count is 2) and (cards[0].value() is 8) and (cards[1].value() is 8)
  end function

  procedure setStatus(status as Status)
    set property.status to status
  end procedure

  procedure stand()
    set property.status to Status.standing
  end procedure

  procedure draw()
    set property.status to Status.playing
    let card be dealCard(random())
    set property.cards to cards + {card}
    set property.count to count + 1
    if card.isAce() then
      call addAce()
    else
      set property.total to total + card.value()
    end if
    if total > 21 then
      call useUpSoftAceIfPossible()
    else if card.isAce() then
      set property.softAce to true
    end if
    if (count is 2) and (total is 21) and softAce then
      set property.status to Status.blackjack
    else if property.total > 21 then
      set property.status to Status.bust
    else if property.total is 21 then
      set property.status to Status.standing
    end if
  end procedure

  procedure addAce()
    if property.softAce then
      set property.total to property.total + 1
    else
      set property.total to property.total + 11
      set property.softAce to true
    end if
  end procedure

  private procedure useUpSoftAceIfPossible()
    if softAce then
      set property.total to total - 10
      set property.softAce to false
    else
      set property.status to Status.bust
    end if
  end procedure

  function asString() returns String
    variable str set to ""
    each card in property.cards
      set str to str + card.asString() + " "
    end each
    set str to "{str}({property.total}) {property.status}"
    return str
  end function

end class

class Card
  constructor(rank as String, suit as Int)
    set property.rank to rank
    set property.suit to suit
  end constructor

  property suit as Int

  property rank as String

  function value() returns Int
    return rankValue[rank]
  end function

  function isAce() returns Boolean
    return rank is "A"
  end function

  function asString() returns String
    let colourName be if (suit is 0) or (suit is 3) then "black" else "red"
    let tag be htmlEscChars[suit]
    return "{property.rank}<span style='color: {colourName}'>{tag}</span>"
  end function

end class

enum Action stand, draw

enum Outcome undecided, win, lose, draw

enum Status pending, playing, standing, blackjack, bust

constant rankValue set to {"2":2, "3":3, "4":4, "5":5, "6":6, "7":7, "8":8, "9":9, "10":10, "J":10, "Q":10, "K":10, "A":11}

constant htmlEscChars set to {"&clubs;", "&diams;", "&hearts;", "&spades;"}

function strategyA(hand as Hand, dealerFaceUp as Card) returns Action
  return if hand.total > 16 then Action.stand else Action.draw
end function

function strategyB(hand as Hand, dealerFaceUp as Card) returns Action
  return Action.draw
end function

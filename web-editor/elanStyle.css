* {
    font-family: consolas, monospace;
    font-size: 11pt;
}
.elan-code, #console {
    color: var(--defaultText);
    background-color: var(--defaultBackground);
    border-color: var(--defaultBackground);
    font-style: normal;
}

*:focus {
    outline: none;
}

input, input:focus , input:active{
    font-family: consolas;
    border: none;
    outline: none;
    padding: 0px;
    margin: 0px;
    caret-color: var(--defaultText);
}

/* Basic Colour scheme */

el-hash {
    display: none;
}

span {
    background-color: inherit;
}
el-ky {
    color: var(--keyword);
} 
el-field el-txt {
    border-style:hidden;
    border-width: 1px;
}
el-field.selected el-txt {
    border-style: solid;
    border-color: black;
    position:relative; /* Ensures that the border is not overwritten by textfields in the line below */ 
}
el-method, el-method el-field.ok el-txt {
    color: var(--method);
}
el-type {
    color: var(--type);
}
el-string {
    color: var(--string);
    white-space: pre;
}

el-regex {
    color: var(--string);
}

/* Header & comments */
el-comment *, el-comment el-field.ok el-txt  {
    color: var(--comment);
}

#fileStatus {
    display: none;
}

el-hdr, el-hdr * {
    color: var(--comment);
}
el-hdr .error {
    color: var(--error)
}
el-hdr .warning {
    color: var(--warning)
}
el-hdr .ok {
    color: var(--ok)
}


/* Horizontal and vertical spacing */
el-statement, el-constructor, el-property, el-class > el-func, el-class > el-proc, el-class > el-member {
    display: block;
    background-color: var(--defaultBackground);
    border-left-style: solid;
    border-left-width: 2ch;
    border-color: var(--defaultBackground);
}

el-statement:not(.multiline), el-const{
    padding-left: 1ch; /* Indent 2nd and subsequent lines if el-txt wraps */
    text-indent: -1ch;
}

.autocomplete-popup * {
    text-indent: 0;
}

el-hdr, el-const, main, el-proc, el-func, el-enum, el-class, el-constructor, el-property, el-member, el-global, el-test {
    display: block;
    padding-bottom: 1ch;
}

el-global:has(el-comment) {
    padding-bottom: 0;
}

/* Frame selection */
.selected > * {
    border-left-color: var(--selection);
}

.selected > el-top, .selected > el-top *, .selected > el-kw, .selected > el-field, .selected > el-field *, .selected > el-txt, .selected > placeholder, .selected > completion {
    background-color: var(--selection);
    border-right-color: var(--selection);
}

/* Multline Collapse / Expand */
el-expand {
    display: none;
}
.multiline.collapsed > :not(el-top) {
    display: none;
}
.multiline.collapsed el-expand {
    display:inline;
    font-weight: bold;
    color: var(--reverseText);
    margin-right: 1ch;
    /* cursor: pointer; why only this? */
}
/* colour corresponds to worst of parseStatus and compileStatus (and el-testStatus - for el-tests only)*/
.multiline.collapsed el-expand {
    background-color: var(--ok);
}
.multiline.collapsed.warning el-expand {
    background-color: var(--warning);
}
.multiline.collapsed.error el-expand {
    background-color: var(--error);
}

/* Fields */
el-field.warning, el-field.warning el-kw, el-field.warning el-type, el-field.warning el-string, el-field.warning el-method {
    background-color: var(--warning);
}
.error el-field, el-field.error el-kw, el-field.error  el-type, el-field.error  el-string, el-field.error el-method {
    color: var(--defaultText);
}

/* el-field-el-txt*/
el-field el-txt {
    color: var(--defaultText);
    background-color: var(--defaultBackground);
}
el-field.error el-txt, el-field.error input  {
    background-color: var(--error);
}
el-field.warning el-txt, el-field.warning input {
    background-color: var(--warning);
}
el-field.selected.ok el-txt, el-field.selected.ok input {
    background-color: var(--ok);
}
el-field.selected.ok.optional.empty el-txt, el-field.selected.ok.optional.empty input {
    background-color: var(--optional);
}

/* el-field placeholder */
el-field placeholder {
  display: none; 
}

el-field.empty placeholder, el-field.empty placeholder * {
    display: inline;
    color: var(--reverseText);
}

el-field.empty.optional placeholder, el-field.empty.optional placeholder * {
    display: none;
    color: var(--optional);
}

el-field.empty.selected placeholder, el-field.empty.selected placeholder * {
    display: inline;
    color: var(--reverseText);
    background-color: var(--warning);
}

el-field.empty.optional.selected placeholder, el-field.empty.optional.selected placeholder * {
    display: inline;
    color: var(--reverseText);
    background-color: var(--optional);
}

el-field.empty.optional.selected placeholder, el-field.empty.optional.selected placeholder * {
    display: inline;
}

/* ... however, different rules when it is the 'holding' frame that is selected */
.selected > el-top el-field.empty placeholder, .selected > el-field.empty placeholder {
    display:inline;
    color: var(--warning);
}
.selected > el-top el-field.empty.optional placeholder, .selected > el-field.empty.optional placeholder {
    display:inline;
    color: var(--reverseText);
}
el-field.selected ~ el-field.empty placeholder, el-field.selected ~ el-field.empty.optional placeholder{
    display: inline;
}

/* el-field help */
el-field help, el-field.selected.ok help {
    display: none;
}
el-field.selected help, el-field.selected.ok.optional help  {
    display: inline;
    color: var(--reverseText);
    background-color: var(--help);
}

/* el-field completion */
el-field completion  {
    display: none;
}

el-field.selected completion, el-field.selected completion * {
    display: inline;
    color: var(--reverseText);
    background-color: var(--warning);
}

el-field.selected.empty completion, el-field.selected.empty completion *,
el-field.selected.empty.optional completion, el-field.selected.empty.optional completion *  {
    display: none;
}

/*  msg */
msg {
    display: inline;
    color: var(--reverseText);
}

msg.ok {
    background-color: var(--ok);
}
msg.warning {
    background-color: var(--warning);
}
msg.error {
    background-color: var(--error);
}

/* el-field msg */

el-field msg {
    display: none;
}

el-field.selected msg, el-field.selected msg * {
    display: inline;
}

/* Selectors */
  selector * {
    background-color: var(--reverseText);
    color: var(--optional);
  }
  selector help {
    display: none; 
  }
  .selected > selector help {
    border-style: solid;
    border-color: black;
    border-width: 1px;
    display: inline;
    background-color: var(--optional);
    color: var(--reverseText);
  }
  .selected > selector el-txt {
    color: var(--defaultText);
  }

  /* selector placeholder */
selector placeholder  {
    display: none;
}
.empty > selector placeholder {
    display: inline;
    color: var(--optional);
}
.selected > selector placeholder {
    display: none;
}

frno {
    float: right;
    color: darkgrey;
    font-size: 11pt;
    margin-left: 5px;
    text-indent: 0;
}

el-const frno, el-const.multiline.collapsed frno {
    display: inline-block;
}

el-statement.selected:not(.multiline) frno, 
.multiline.selected > el-top frno, 
el-const.selected frno, 
.selected ~ frno, 
el-method:has(el-field.selected) ~ frno,
frno:has(~ el-field.selected), /* this and next clause specifically for 'repeat expression' el-field */
el-statement.selected > frno  
 {
    background-color: var(--selection);
    color: white;
    text-indent: 0;
}




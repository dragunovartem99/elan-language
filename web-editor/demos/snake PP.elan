# bb7babf90fdb8f7f2d7fae527d5db9c6688a951fb1bfd8db75c6eccce51b14f4 Elan Beta 2 valid

# Run the program and use the standard W,A,S,D keys to change Snake direction
# Try to 'eat' the (red) apples, and avoid hitting the edge or the body of the snake.
main
  var gr set to new BlockGraphics()
  var head set to [20, 15]
  var tail set to head
  var body set to [head]
  var currentDir set to "right"
  var gameOn set to true
  var apple set to [0, 0]
  call setAppleToRandomPosition(apple, body)
  while gameOn
    set gr to updateGraphics(gr, head, tail, body, apple)
    call gr.draw()
    set currentDir to directionByKey(currentDir, gr.getKeystroke())
    set tail to body[0]
    call body.append(head)
    set head to getAdjacentSquare(head, currentDir)
    set gameOn to not hasHitEdge(head) and not overlaps(body, head)
    call eatAppleIfPoss(head, body, apple)
    call pause(150)
  end while
  print "Game Over! Score: {body.length() - 1}"
end main

procedure setAppleToRandomPosition(apple as [Int], body as [[Int]])
  repeat
    call apple.putAt(0, randomInt(0, 39))
    call apple.putAt(1, randomInt(0, 29))
  end repeat when not overlaps(body, apple)
end procedure

procedure eatAppleIfPoss(head as [Int], body as [[Int]], apple as [Int])
  if head is apple
    then
      call setAppleToRandomPosition(apple, body)
    else
      call body.removeAt(0)
  end if
end procedure

function updateGraphics(gr as BlockGraphics, head as [Int], tail as [Int], body as [[Int]], apple as [Int]) return BlockGraphics
  var gr2 set to gr.putBackground(head[0], head[1], green)
  if body[0] is tail
    then
      set gr2 to gr2.putBackground(tail[0], tail[1], green)
    else
      set gr2 to gr2.putBackground(tail[0], tail[1], white)
  end if
  set gr2 to gr2.putBackground(apple[0], apple[1], red)
  return gr2
end function

function hasHitEdge(head as [Int]) return Boolean
  return (head[0] < 0) or (head[1] < 0) or (head[0] > 39) or (head[1] > 29)
end function

function getAdjacentSquare(sq as [Int], dir as String) return [Int]
  var newX set to sq[0]
  var newY set to sq[1]
  switch dir
    case "left"
      set newX to newX - 1
    case "right"
      set newX to newX + 1
    case "up"
      set newY to newY - 1
    case "down"
      set newY to newY + 1
  end switch
  return [newX, newY]
end function

function overlaps(body as [[Int]], sq as [Int]) return Boolean
  var result set to false
  each seg in body
    if (seg is sq)
      then
        set result to true
    end if
  end each
  return result
end function

function directionByKey(current as String, key as String) return String
  var dir set to current
  switch key
    case "w"
      set dir to "up"
    case "s"
      set dir to "down"
    case "a"
      set dir to "left"
    case "d"
      set dir to "right"
  end switch
  return dir
end function

test hasHitEdge
  assert hasHitEdge([0, 0]) is false
  assert hasHitEdge([0, 29]) is false
  assert hasHitEdge([39, 0]) is false
  assert hasHitEdge([29, 29]) is false
  assert hasHitEdge([-1, 5]) is true
  assert hasHitEdge([5, 30]) is true
  assert hasHitEdge([40, 5]) is true
  assert hasHitEdge([5, -1]) is true
end test

test eatAppleIfPoss
  var body set to [[0, 0], [1, 0]]
  var head set to [0, 2]
  var apple set to [0, 2]
  call eatAppleIfPoss(head, body, apple)
  var appleInSamePosition set to apple is [0, 2]
  assert appleInSamePosition is false
  assert body is [[0, 0], [1, 0]]
  var apple2 set to [5, 6]
  call eatAppleIfPoss(head, body, apple2)
  var apple2inSamePosition set to apple2 is [5, 6]
  assert apple2inSamePosition is true
  assert body is [[1, 0]]
end test

test overlaps
  let body be [[1, 2], [3, 4]]
  assert overlaps(body, [1, 2]) is true
  assert overlaps(body, [3, 4]) is true
  assert overlaps(body, [1]) is false
  assert overlaps(body, [2, 1]) is false
end test

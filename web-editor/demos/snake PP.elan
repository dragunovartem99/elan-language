# 6cb81632df62847389a9934e00e938cb55d98c67454161c91c253b2f103140f7 Elan Beta 1 valid

main
  var gr set to new Graphics()
  var head set to [20, 15]
  var tail set to head
  var body set to [head]
  var apple set to [0, 0]
  call randomNewApplePosition(apple, body)
  var currentDirection set to "right"
  var gameOn set to true
  while gameOn
    set gr to updateGraphics(gr, head, tail, body, apple)
    call gr.draw()
    var k set to gr.getKeystroke()
    if k isnt ""
      then
        set currentDirection to directionbyKey(k)
    end if
    set tail to body[0]
    call body.add(head)
    set head to getAdjacentSquare(head, currentDirection)
    call checkForEatenApple(head, body, apple)
    set gameOn to not hasHitEdge(head) and not overlaps(body, head)
    call pause(150)
  end while
  print "Game Over! Score: {body.length() - 1}"
end main

procedure checkForEatenApple(head as [Int], body as [[Int]], apple as [Int])
  if head is apple
    then
      call randomNewApplePosition(apple, body)
    else
      call body.removeAt(0)
  end if
end procedure

procedure randomNewApplePosition(apple as [Int], body as [[Int]])
  repeat
    set apple[0] to randomInt(0, 39)
    set apple[1] to randomInt(0, 29)
  end repeat when not overlaps(body, apple)
end procedure

function updateGraphics(gr as Graphics, head as [Int], tail as [Int], body as [[Int]], apple as [Int]) return Graphics
  var gr2 set to gr
  set gr2 to gr2.putBackground(head[0], head[1], green)
  if body[0] is tail
    then
      set gr2 to gr2.putBackground(tail[0], tail[1], green)
    else
      set gr2 to gr2.putBackground(tail[0], tail[1], white)
  end if
  set gr2 to gr2.putBackground(apple[0], apple[1], red)
  return gr2
end function

function hasHitEdge(head as [Int]) return Boolean
  return (head[0] < 0) or (head[1] < 0) or (head[0] > 39) or (head[1] > 29)
end function

function getAdjacentSquare(sq as [Int], dir as String) return [Int]
  var newX set to sq[0]
  var newY set to sq[1]
  switch dir
    case "left"
      set newX to newX - 1
    case "right"
      set newX to newX + 1
    case "up"
      set newY to newY - 1
    case "down"
      set newY to newY + 1
  end switch
  return [newX, newY]
end function

function overlaps(body as [[Int]], sq as [Int]) return Boolean
  var result set to false
  each seg in body
    if (seg is sq)
      then
        set result to true
    end if
  end each
  return result
end function

function directionbyKey(key as String) return String
  var dir set to ""
  switch key
    case "w"
      set dir to "up"
    case "s"
      set dir to "down"
    case "a"
      set dir to "left"
    case "d"
      set dir to "right"
  end switch
  return dir
end function

constant green set to 0x00ff00

constant red set to 0xff0000

constant white set to 0xffffff

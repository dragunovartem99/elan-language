# a91c1e376fec5a278fb8ff0ba9b06b83eec3a0cb567f4b9b8e29326b7898c4fc Elan v0.1 valid

function calcA(sumX as Number, sumXsq as Number, sumY as Number, sumXY as Number, n as Int) return Number
  return (sumY * sumXsq - sumX * sumXY) / (n * sumXsq - sumX * sumX)
end function

function calcSumX(points as List<of (Number, Number)>) return Number
  return points.reduce(0.0, lambda s as Number, p as Number => s + p.first())
end function

function calcSumXY(points as List<of (Number, Number)>) return Number
  return points.reduce(0.0, lambda s as Number, p as Number => s + p.first() * p.second())
end function

function calcSumY(points as List<of (Number, Number)>) return Number
  return points.reduce(0.0, lambda s as Number, p as Number => s + p.second())
end function

function calcSumXsq(points as List<of (Number, Number)>) return Number
  return points.reduce(0.0, lambda s as Number, p as Number => s + p.first() * p.first())
end function

function bestFitFromPoints(points as List<of (Number, Number)>) return (Number, Number)
  return bestFitFromSummaryTerms(calcSumX(points), calcSumXsq(points), calcSumY(points), calcSumXY(points), points.length())
end function

function calcB(sumX as Number, sumXsq as Number, sumY as Number, sumXY as Number, n as Int) return Number
  return (n * sumXY - sumX * sumY) / (n * sumXsq - sumX * sumX)
end function

function bestFitFromSummaryTerms(sumX as Number, sumX2 as Number, sumY as Number, sumXY as Number, n as Int) return (Number, Number)
  return (calcA(sumX, sumX2, sumY, sumXY, n), calcB(sumX, sumX2, sumY, sumXY, n))
end function

constant example set to [(0, 2.673040396), (1, 3.550437254), (2, 5.063963424), (3, 6.445493589), (4, 5.959864362), (5, 7.826499306), (6, 5.628729698), (7, 10.65942485), (8, 8.010532477), (9, 10.67121885), (10, 9.000669447), (11, 13.50830072), (12, 11.43464406), (13, 13.58275437), (14, 13.10821319), (15, 10.28617997), (16, 17.86384888), (17, 15.20409345), (18, 17.00764549), (19, 12.11596949)]

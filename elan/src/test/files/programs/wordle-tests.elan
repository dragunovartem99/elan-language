main
  var wc set to new WordCount("FOOBA", 0)
end main

immutable class WordCount
  constructor(word as String, count as Int)
    set property.word to word
    set property.count to count
  end constructor

  property word as String

  property count as Int

end class

function markAttempt(attempt as String, target as String) return String
  return ""
end function

test markAttempt
  assert markAttempt("ABCDE", "XXXXX") is "_____"
  assert markAttempt("ABCDE", "BCDEA") is "+++++"
  assert markAttempt("ABCDE", "ABCDE") is "*****"
  assert markAttempt("SAINT", "LADLE") is "_*___"
  assert markAttempt("IDEAL", "LADLE") is "_++++"
  assert markAttempt("CABAL", "RECAP") is "+__*_"
  assert markAttempt("CABAL", "RECAP") is "+__*_"
  assert markAttempt("COLON", "GLORY") is "_++__"
end test

function possibleAnswersAfterAttempt(prior as Iter<of String>, attempt as String, mark as String) return Iter<of String>
  return prior
end function

test possibleAnswersAfterAttempt
  let prior be {"ABCDE", "BCDEA", "CDEAB", "DEABC", "EABCD"}
  assert possibleAnswersAfterAttempt(prior, "AAAAA", "*____") is "ABCDE"
  assert possibleAnswersAfterAttempt(prior, "AXXXX", "+____") is {"BCDEA", "CDEAB", "DEABC", "EABCD"}
  assert possibleAnswersAfterAttempt(prior, "AXXBX", "+__+_") is {"BCDEA", "CDEAB", "EABCD"}
end test

function maxWordCountRemainingAfterAttempt(possibleAnswers as Iter<of String>, attempt as String) return Int
  return 0
end function

test maxWordCountRemainingAfterAttempt
  let prior be {"ABCDE", "BCDEA", "CDEAB", "DEABC", "EABCD"}
  assert maxWordCountRemainingAfterAttempt(prior, "AAAAA") is 1
  assert maxWordCountRemainingAfterAttempt(prior, "AXXXX") is 4
  assert maxWordCountRemainingAfterAttempt(prior, "XXXXX") is 5
end test

function allRemainingWordCounts(possAnswers as ImmutableList<of String>, possAttempts as Iter<of String>) return Iter<of WordCount>
  return {new WordCount("FOOBA", 0)}
end function

test allRemainingWordCounts
  let possAnswers be {"AAAAA", "BBBBB", "CCCCC", "DDDDD"}
  let possAttempts be {"ABABA", "BCBCB", "ABCBC"}
  let expected be {("ABABA", 2), ("BCBCB", 2), ("ABCBC", 1)}
  assert allRemainingWordCounts(possAnswers, possAttempts) is expected
end test

function betterOf(wc1 as WordCount, wc2 as WordCount, possAnswers as Iter<of String>) return WordCount
   return new WordCount("FOOBA", 0)
end function

test betterOf
  let possAnswers be new ImmutableList<of String>()
  assert betterOf(new WordCount("A", 3), new WordCount("B", 2), possAnswers) is "B"
  assert betterOf(new WordCount("B", 2), new WordCount("A", 3), possAnswers) is "B"
  assert betterOf(new WordCount("B", 2), new WordCount("A", 2), possAnswers) is "B"
  assert betterOf(new WordCount("A", 2), new WordCount("B", 2), possAnswers) is "A"
  possAnswers = new List<string> {"B"}
  assert betterOf(new WordCount("A", 2), new WordCount("B", 2), possAnswers) is "B"
  possAnswers = new List<string> {"B", "A"}
  assert betterOf(new WordCount("A", 2), new WordCount("B", 2), possAnswers) is "B"
  assert betterOf(new WordCount("B", 2), new WordCount("A", 2), possAnswers) is "A"
end test

function bestAttempt(possAnswers as ImmutableList<of String>, possAttempts as ImmutableList<of String>) return String
  return ""
end function

test bestAttempt
  let possAnswers be {"ABCDE", "ABBBB", "EDCBA"}
  let possAttempts be {"AAAAA", "BBBBB", "CCCCC", "DDDDD", "EEEEE", "EDCBA", "DEABC"}
  assert bestAttempt(possAnswers, possAttempts) is "EDCBA"
  let possAnswers2 be {"ABCDE", "ABBBB", "BCDEA"}
  let possAttempts2 be {"AAAAA", "BBBBB", "CCCCC", "DDDDD", "EEEEE", "EDCBA", "DEABC"}
  assert bestAttempt(possAnswers, possAttempts) is "BBBBB"
end test


# 8ef2fbee46c386dadda63db6a8f33d7f7ab965aaf6cbe8fd6e0c18716a87be2b Elan v0.1 valid

main
  var cm set to new CharMap()
  var g set to exampleCells
  while true
    call drawGrid(cm, g)
    set g to nextGeneration(g)
  end while
end main

procedure drawGrid(cm as CharMap, grid as List<of Bool>)
  # should be re-done using buffered char map to reduce flickering.
  for row from 0 to 19 step 1
    for col from 0 to 19 step 1
      var cell set to grid[col * 20 + row]
      var colour set to if cell then Colour.white else Colour.black
      call cm.putBlockWithColour((col * 2), row, colour)
      call cm.putBlockWithColour((col * 2 + 1), row, colour)
      # because square block is 2 chars wide
    end for
  end for
end procedure

function north(c as Int) return Int
  return if c > 19 then c - 20 else   c + 380
end function

function south(c as Int) return Int
  return if c < 380 then c + 20 else c - 380
end function

function east(c as Int) return Int
  return if c mod 20 < 19 then c + 1 else c - 19
end function

function west(c as Int) return Int
  return if c mod 20 > 0 then c - 1 else c + 1
end function

function northEast(c as Int) return Int
  return north(east(c))
end function

function southEast(c as Int) return Int
  return south(east(c))
end function

function northWest(c as Int) return Int
  return north(west(c))
end function

function southWest(c as Int) return Int
  return south(west(c))
end function

function neighbourCells(c as Int) return List<of Int>
  return [northWest(c), north(c), northEast(c), west(c), east(c), southWest(c), south(c), southEast(c)]
end function

function liveNeighbours(cells as List<of Bool>, c as Int) return Int
  var neighbours set to neighbourCells(c)
  var live set to neighbours.filter(lambda i as Int return cells[i])
  return live.count()
end function

function willLive(currentlyAlive as Bool, liveNeighbours as Int) return Bool
  return if currentlyAlive then liveNeighbours > 1 and liveNeighbours < 4 else liveNeighbours is 3
end function

function nextCellValue(cells as List<of Bool>, c as Int) return Bool
  return willLive(cells[c], liveNeighbours(cells, c))
end function

function nextGeneration(cells as List<of Bool>) return List<of Bool>
  var cellRange set to integers(0, cells.length()-1)
  var next set to cellRange.map(lambda n as Int return nextCellValue(cells, n))
  return next.asList()
end function

constant exampleCells set to [false, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, true, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false]

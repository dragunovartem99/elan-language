# 1f7466219a459f5cb015fc0c5dd25dad20f897694a1db816407ddc3291e47b78 Elan v0.1 valid

function isYellow(attempt String, target String, n Int) returning Bool
  return target.contains(attempt[n])
end function

function setAttemptIfYellow(attempt String, target String, n Int) returning String
  return if attempt[n] is '*' then attempt else if attempt.isYellow(target, n) then attempt.setChar(n, '+') else attempt.setChar(n, '_')
end function

function setTargetIfYellow(attempt String, target String, n Int) returning String
  return if attempt.isAlreadyMarkedGreen(n) then target else if attempt.isYellow(target, n) then target.setChar(target.indexOf(attempt[n]), '.') else target
end function

constant allPossibleAnswers set to {"ABACK","ABASE","ABATE","ABBEY","ABBOT","ABHOR","ABIDE","ABLED","ABODE","ABORT","ABOUT","ABOVE"}

constant validWords set to {"ABACK","ABASE","ABATE","ABBEY","ABBOT","ABHOR","ABIDE","ABLED","ABODE","ABORT","ABOUT","ABOVE"}

main
  var possible set to validWords
  var marking set to ""
  var attempt set to "RAISE"
  while marking is not "*****"
    print attempt
    input marking
    set possible to possibleAnswersAfterAttempt(possible, attempt, marking).asList()
    set attempt to bestAttempt(possible, validWords)
  end while
end main

function isGreen(attempt String, target String, n Int) returning Bool
  return target[n] is attempt[n]
end function

function setChar(word String, n Int, newChar Char) returning String
  return word[..n] + newChar + word[n+1..]
end function

function setAttemptIfGreen(attempt String, target String, n Int) returning String
  return if  attempt.isGreen(target, n) then attempt.setChar(n, '*')  else attempt
end function

function setTargetIfGreen(attempt String, target String, n Int) returning String
  return if  attempt.isGreen(target, n) then target.setChar(n, '.') else target
end function

function isAlreadyMarkedGreen(attempt String, n Int) returning Bool
  return attempt[n] is '*'
end function

constant letterPositions set to {0,1,2,3,4}

function evaluateGreens(attempt String, target String) returning (String, String)
  return letterPositions.reduce((attempt, target), lambda a, x  -> (setAttemptIfGreen(a.attempt, a.target, x), setTargetIfGreen(a.attempt, a.target, x)))
end function

function evaluateYellows(attempt String, target String) returning (String, String)
  return letterPositions.reduce((attempt, target),lambda a, x -> (setAttemptIfYellow(a.attempt, a.target, x), setTargetIfYellow(a.attempt, a.target, x)))
end function

function markAttempt(attempt String, target String) returning String
  var (attemptAfterGreens, targetAfterGreens) set to evaluateGreens(attempt, target)
  return attemptAfterGreens.evaluateYellows(targetAfterGreens).first()
end function

function possibleAnswersAfterAttempt(prior Iter<of String>, attempt String, mark String) returning Iter<of String>
  return prior.filter(lambda w -> markAttempt(attempt, w) is mark)
end function

function wordCountRemainingAfterAttempt(possibleAnswers Iter<of String>, attempt String) returning WordCount
  var groups set to possibleAnswers.groupBy(lambda w -> markAttempt(attempt, w))
  return new WordCount(attempt, groups.maxBy(lambda g -> g.members.count()).members.count())
end function

function allRemainingWordCounts(possAnswers List<of String>, possAttempts Iter<of String>) returning Iter<of WordCount>
  return possAttempts.asParallel().map(lambda w -> wordCountRemainingAfterAttempt(possAnswers, w))
end function

function betterOf(wc1 WordCount, wc2 WordCount, possAnswers Iter<of String>) returning WordCount
  var isBetter set to wc2.count < wc1.count
  var isEqualAndPossAnswer set to wc2.count is wc1.count and possAnswers.contains(wc2.word)
  return if isBetter or isEqualAndPossAnswer then wc2 else wc1
end function

function bestAttempt(possAnswers List<of String>, possAttempts List<of String>) returning String
  var wordCounts set to allRemainingWordCounts(possAnswers, possAttempts)
  return wordCounts.reduce(wordCounts.head(),lambda bestSoFar, newWord ->  betterOf(bestSoFar, newWord, possAnswers)).word
end function

immutable class WordCount
  constructor(word String, count Int)
    set property.word to word
    set property.count to count
  end constructor

  property word String

  property count Int

  function asString() returning String
    return "{word}, {count}"
  end function

end class

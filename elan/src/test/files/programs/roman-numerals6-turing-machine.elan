# 29659b7670de9c8a98eba672ad10aa9e87570c5e8ab8efea381a9f8c7aa06a64 Elan v0.1 valid

main
  var tm set to new TuringMachine("init", "halt")
  call addRulesForRomanNumeralsInto(tm)
  print "Enter a decimal number in range 0 to 2500"
  input decimal
  call tm.setTape(decimal.asString())
  while not tm.isHalted()
    call tm.singleStep()
    call clearConsole()
    print tm.tape
    print "{spaces.substring(0, tm.headPosition - 1)}^"
    print tm.currentState
    call pause(40)
  end while
  print "The roman numeral equivalent for {decimal} is {tm.getTrimmedTape()}"
end main

class TuringMachine
  constructor(initialState as String, haltState as String)
    set property.initialState to initialState
    set property.haltState to haltState
    set rules to empty {Rule}
    set currentState to initialState
    set headPosition to 0
  end constructor

  property initialState as String

  property currentState as String

  property headPosition as Int

  property haltState as String

  property rules as {Rule}

  property tape as String

  procedure setTape(tape as String)
    set property.tape to tape
  end procedure

  procedure setRules(rules as {Rule})
    set property.rules to rules
  end procedure

  procedure add(rule as Rule)
    set rules to rules + rule
  end procedure

  procedure reset()
    set currentState to initialState
    set headPosition to 0
  end procedure

  procedure singleStep()
    var rule set to findMatchingRule()
    call execute(rule)
  end procedure

  procedure runToEnd()
    while not isHalted()
      call singleStep()
    end while
  end procedure

  function isHalted() return Boolean
    return currentState is haltState
  end function

  function getTrimmedTape() return String
    return tape.trim()
  end function

  function findMatchingRule() return Rule
    let matches be rules.filter(lambda r as Rule => (r.currentState is currentState) and (r.currentSymbol is tape[headPosition]))
    if matches.length() is 0
      then
        throw "No rule matching state {currentState} and symbol {tape[headPosition]}"
    end if
    return matches.head()
  end function

  procedure write(newSymbol as String)
    var hp set to headPosition
    set tape to tape[..hp] + newSymbol + tape[hp + 1..]
  end procedure

  procedure execute(rule as Rule)
    set currentState to rule.nextState
    call write(rule.writeSymbol)
    if rule.move is Dir.right
      then
        set headPosition to headPosition + 1
        if headPosition >= tape.length()
          then
            set tape to tape + " "
        end if
      else
        set headPosition to headPosition - 1
        if headPosition < 0
          then
            set tape to " " + tape
            set headPosition to 0
        end if
    end if
  end procedure

end class

immutable class Rule
  constructor(currentState as String, currentSymbol as String, nextState as String, writeSymbol as String, move as Dir)
    set property.currentState to currentState
    set property.currentSymbol to currentSymbol
    set property.nextState to nextState
    set property.writeSymbol to writeSymbol
    set property.move to move
  end constructor

  property currentState as String

  property currentSymbol as String

  property nextState as String

  property writeSymbol as String

  property move as Dir

  function asString() return String
    return "{currentState},{currentSymbol},{nextState},{writeSymbol},{move}"
  end function

end class

enum Dir
  left, right
end enum

constant spaces set to "                                                  "

procedure addRulesForRomanNumeralsInto(tm as TuringMachine)
  # name: Denary to Roman "Numerals", initial state = "init", accept state = "halt"
  # Example tape input:  2024 (between 0 and 2499)
  call tm.add(new Rule("init", "0", "init", "0", Dir.right))
  call tm.add(new Rule("init", "1", "init", "1", Dir.right))
  call tm.add(new Rule("init", "2", "init", "2", Dir.right))
  call tm.add(new Rule("init", "3", "init", "3", Dir.right))
  call tm.add(new Rule("init", "4", "init", "4", Dir.right))
  call tm.add(new Rule("init", "5", "init", "5", Dir.right))
  call tm.add(new Rule("init", "6", "init", "6", Dir.right))
  call tm.add(new Rule("init", "7", "init", "7", Dir.right))
  call tm.add(new Rule("init", "8", "init", "8", Dir.right))
  call tm.add(new Rule("init", "9", "init", "9", Dir.right))
  call tm.add(new Rule("init", " ", "return", "]", Dir.left))
  # read next digit
  call tm.add(new Rule("readNextDigit", "0", "write0", "[", Dir.right))
  call tm.add(new Rule("readNextDigit", "1", "write1", "[", Dir.right))
  call tm.add(new Rule("readNextDigit", "2", "write2", "[", Dir.right))
  call tm.add(new Rule("readNextDigit", "3", "write3", "[", Dir.right))
  call tm.add(new Rule("readNextDigit", "4", "write4", "[", Dir.right))
  call tm.add(new Rule("readNextDigit", "5", "write5", "[", Dir.right))
  call tm.add(new Rule("readNextDigit", "6", "write6", "[", Dir.right))
  call tm.add(new Rule("readNextDigit", "7", "write7", "[", Dir.right))
  call tm.add(new Rule("readNextDigit", "8", "write8", "[", Dir.right))
  call tm.add(new Rule("readNextDigit", "9", "write9", "[", Dir.right))
  call tm.add(new Rule("readNextDigit", "]", "gotoEnd", " ", Dir.right))
  # write0
  call tm.add(new Rule("write0", "0", "write0", "0", Dir.right))
  call tm.add(new Rule("write0", "1", "write0", "1", Dir.right))
  call tm.add(new Rule("write0", "2", "write0", "2", Dir.right))
  call tm.add(new Rule("write0", "3", "write0", "3", Dir.right))
  call tm.add(new Rule("write0", "4", "write0", "4", Dir.right))
  call tm.add(new Rule("write0", "5", "write0", "5", Dir.right))
  call tm.add(new Rule("write0", "6", "write0", "6", Dir.right))
  call tm.add(new Rule("write0", "7", "write0", "7", Dir.right))
  call tm.add(new Rule("write0", "8", "write0", "8", Dir.right))
  call tm.add(new Rule("write0", "9", "write0", "9", Dir.right))
  call tm.add(new Rule("write0", "]", "write0", "]", Dir.right))
  call tm.add(new Rule("write0", "I", "write0", "I", Dir.right))
  call tm.add(new Rule("write0", "V", "write0", "V", Dir.right))
  call tm.add(new Rule("write0", "X", "write0", "X", Dir.right))
  call tm.add(new Rule("write0", "|", "write0", "|", Dir.right))
  call tm.add(new Rule("write0", " ", "return", "|", Dir.left))
  # write1
  call tm.add(new Rule("write1", "0", "write1", "0", Dir.right))
  call tm.add(new Rule("write1", "1", "write1", "1", Dir.right))
  call tm.add(new Rule("write1", "2", "write1", "2", Dir.right))
  call tm.add(new Rule("write1", "3", "write1", "3", Dir.right))
  call tm.add(new Rule("write1", "4", "write1", "4", Dir.right))
  call tm.add(new Rule("write1", "5", "write1", "5", Dir.right))
  call tm.add(new Rule("write1", "6", "write1", "6", Dir.right))
  call tm.add(new Rule("write1", "7", "write1", "7", Dir.right))
  call tm.add(new Rule("write1", "8", "write1", "8", Dir.right))
  call tm.add(new Rule("write1", "9", "write1", "9", Dir.right))
  call tm.add(new Rule("write1", "]", "write1", "]", Dir.right))
  call tm.add(new Rule("write1", "I", "write1", "I", Dir.right))
  call tm.add(new Rule("write1", "V", "write1", "V", Dir.right))
  call tm.add(new Rule("write1", "X", "write1", "X", Dir.right))
  call tm.add(new Rule("write1", "|", "write1", "|", Dir.right))
  call tm.add(new Rule("write1", " ", "write0", "I", Dir.right))
  # write2 
  call tm.add(new Rule("write2", "0", "write2", "0", Dir.right))
  call tm.add(new Rule("write2", "1", "write2", "1", Dir.right))
  call tm.add(new Rule("write2", "2", "write2", "2", Dir.right))
  call tm.add(new Rule("write2", "3", "write2", "3", Dir.right))
  call tm.add(new Rule("write2", "4", "write2", "4", Dir.right))
  call tm.add(new Rule("write2", "5", "write2", "5", Dir.right))
  call tm.add(new Rule("write2", "6", "write2", "6", Dir.right))
  call tm.add(new Rule("write2", "7", "write2", "7", Dir.right))
  call tm.add(new Rule("write2", "8", "write2", "8", Dir.right))
  call tm.add(new Rule("write2", "9", "write2", "9", Dir.right))
  call tm.add(new Rule("write2", "]", "write2", "]", Dir.right))
  call tm.add(new Rule("write2", "I", "write2", "I", Dir.right))
  call tm.add(new Rule("write2", "V", "write2", "V", Dir.right))
  call tm.add(new Rule("write2", "X", "write2", "X", Dir.right))
  call tm.add(new Rule("write2", "|", "write2", "|", Dir.right))
  call tm.add(new Rule("write2", " ", "write1", "I", Dir.right))
  # write3 
  call tm.add(new Rule("write3", "0", "write3", "0", Dir.right))
  call tm.add(new Rule("write3", "1", "write3", "1", Dir.right))
  call tm.add(new Rule("write3", "2", "write3", "2", Dir.right))
  call tm.add(new Rule("write3", "3", "write3", "3", Dir.right))
  call tm.add(new Rule("write3", "4", "write3", "4", Dir.right))
  call tm.add(new Rule("write3", "5", "write3", "5", Dir.right))
  call tm.add(new Rule("write3", "6", "write3", "6", Dir.right))
  call tm.add(new Rule("write3", "7", "write3", "7", Dir.right))
  call tm.add(new Rule("write3", "8", "write3", "8", Dir.right))
  call tm.add(new Rule("write3", "9", "write3", "9", Dir.right))
  call tm.add(new Rule("write3", "]", "write3", "]", Dir.right))
  call tm.add(new Rule("write3", "I", "write3", "I", Dir.right))
  call tm.add(new Rule("write3", "V", "write3", "V", Dir.right))
  call tm.add(new Rule("write3", "X", "write3", "X", Dir.right))
  call tm.add(new Rule("write3", "|", "write3", "|", Dir.right))
  call tm.add(new Rule("write3", " ", "write2", "I", Dir.right))
  # write4 
  call tm.add(new Rule("write4", "0", "write4", "0", Dir.right))
  call tm.add(new Rule("write4", "1", "write4", "1", Dir.right))
  call tm.add(new Rule("write4", "2", "write4", "2", Dir.right))
  call tm.add(new Rule("write4", "3", "write4", "3", Dir.right))
  call tm.add(new Rule("write4", "4", "write4", "4", Dir.right))
  call tm.add(new Rule("write4", "5", "write4", "5", Dir.right))
  call tm.add(new Rule("write4", "6", "write4", "6", Dir.right))
  call tm.add(new Rule("write4", "7", "write4", "7", Dir.right))
  call tm.add(new Rule("write4", "8", "write4", "8", Dir.right))
  call tm.add(new Rule("write4", "9", "write4", "9", Dir.right))
  call tm.add(new Rule("write4", "]", "write4", "]", Dir.right))
  call tm.add(new Rule("write4", "I", "write4", "I", Dir.right))
  call tm.add(new Rule("write4", "V", "write4", "V", Dir.right))
  call tm.add(new Rule("write4", "X", "write4", "X", Dir.right))
  call tm.add(new Rule("write4", "|", "write4", "|", Dir.right))
  call tm.add(new Rule("write4", " ", "write5", "I", Dir.right))
  # write5
  call tm.add(new Rule("write5", "0", "write5", "0", Dir.right))
  call tm.add(new Rule("write5", "1", "write5", "1", Dir.right))
  call tm.add(new Rule("write5", "2", "write5", "2", Dir.right))
  call tm.add(new Rule("write5", "3", "write5", "3", Dir.right))
  call tm.add(new Rule("write5", "4", "write5", "4", Dir.right))
  call tm.add(new Rule("write5", "5", "write5", "5", Dir.right))
  call tm.add(new Rule("write5", "6", "write5", "6", Dir.right))
  call tm.add(new Rule("write5", "7", "write5", "7", Dir.right))
  call tm.add(new Rule("write5", "8", "write5", "8", Dir.right))
  call tm.add(new Rule("write5", "9", "write5", "9", Dir.right))
  call tm.add(new Rule("write5", "]", "write5", "]", Dir.right))
  call tm.add(new Rule("write5", "I", "write5", "I", Dir.right))
  call tm.add(new Rule("write5", "V", "write5", "V", Dir.right))
  call tm.add(new Rule("write5", "X", "write5", "X", Dir.right))
  call tm.add(new Rule("write5", "|", "write5", "|", Dir.right))
  call tm.add(new Rule("write5", " ", "write0", "V", Dir.right))
  # write6
  call tm.add(new Rule("write6", "0", "write6", "0", Dir.right))
  call tm.add(new Rule("write6", "1", "write6", "1", Dir.right))
  call tm.add(new Rule("write6", "2", "write6", "2", Dir.right))
  call tm.add(new Rule("write6", "3", "write6", "3", Dir.right))
  call tm.add(new Rule("write6", "4", "write6", "4", Dir.right))
  call tm.add(new Rule("write6", "5", "write6", "5", Dir.right))
  call tm.add(new Rule("write6", "6", "write6", "6", Dir.right))
  call tm.add(new Rule("write6", "7", "write6", "7", Dir.right))
  call tm.add(new Rule("write6", "8", "write6", "8", Dir.right))
  call tm.add(new Rule("write6", "9", "write6", "9", Dir.right))
  call tm.add(new Rule("write6", "]", "write6", "]", Dir.right))
  call tm.add(new Rule("write6", "I", "write6", "I", Dir.right))
  call tm.add(new Rule("write6", "V", "write6", "V", Dir.right))
  call tm.add(new Rule("write6", "X", "write6", "X", Dir.right))
  call tm.add(new Rule("write6", "|", "write6", "|", Dir.right))
  call tm.add(new Rule("write6", " ", "write1", "V", Dir.right))
  # write7
  call tm.add(new Rule("write7", "0", "write7", "0", Dir.right))
  call tm.add(new Rule("write7", "1", "write7", "1", Dir.right))
  call tm.add(new Rule("write7", "2", "write7", "2", Dir.right))
  call tm.add(new Rule("write7", "3", "write7", "3", Dir.right))
  call tm.add(new Rule("write7", "4", "write7", "4", Dir.right))
  call tm.add(new Rule("write7", "5", "write7", "5", Dir.right))
  call tm.add(new Rule("write7", "6", "write7", "6", Dir.right))
  call tm.add(new Rule("write7", "7", "write7", "7", Dir.right))
  call tm.add(new Rule("write7", "8", "write7", "8", Dir.right))
  call tm.add(new Rule("write7", "9", "write7", "9", Dir.right))
  call tm.add(new Rule("write7", "]", "write7", "]", Dir.right))
  call tm.add(new Rule("write7", "I", "write7", "I", Dir.right))
  call tm.add(new Rule("write7", "V", "write7", "V", Dir.right))
  call tm.add(new Rule("write7", "X", "write7", "X", Dir.right))
  call tm.add(new Rule("write7", "|", "write7", "|", Dir.right))
  call tm.add(new Rule("write7", " ", "write2", "V", Dir.right))
  # write8
  call tm.add(new Rule("write8", "0", "write8", "0", Dir.right))
  call tm.add(new Rule("write8", "1", "write8", "1", Dir.right))
  call tm.add(new Rule("write8", "2", "write8", "2", Dir.right))
  call tm.add(new Rule("write8", "3", "write8", "3", Dir.right))
  call tm.add(new Rule("write8", "4", "write8", "4", Dir.right))
  call tm.add(new Rule("write8", "5", "write8", "5", Dir.right))
  call tm.add(new Rule("write8", "6", "write8", "6", Dir.right))
  call tm.add(new Rule("write8", "7", "write8", "7", Dir.right))
  call tm.add(new Rule("write8", "8", "write8", "8", Dir.right))
  call tm.add(new Rule("write8", "9", "write8", "9", Dir.right))
  call tm.add(new Rule("write8", "]", "write8", "]", Dir.right))
  call tm.add(new Rule("write8", "I", "write8", "I", Dir.right))
  call tm.add(new Rule("write8", "V", "write8", "V", Dir.right))
  call tm.add(new Rule("write8", "X", "write8", "X", Dir.right))
  call tm.add(new Rule("write8", "|", "write8", "|", Dir.right))
  call tm.add(new Rule("write8", " ", "write3", "V", Dir.right))
  # write9
  call tm.add(new Rule("write9", "0", "write9", "0", Dir.right))
  call tm.add(new Rule("write9", "1", "write9", "1", Dir.right))
  call tm.add(new Rule("write9", "2", "write9", "2", Dir.right))
  call tm.add(new Rule("write9", "3", "write9", "3", Dir.right))
  call tm.add(new Rule("write9", "4", "write9", "4", Dir.right))
  call tm.add(new Rule("write9", "5", "write9", "5", Dir.right))
  call tm.add(new Rule("write9", "6", "write9", "6", Dir.right))
  call tm.add(new Rule("write9", "7", "write9", "7", Dir.right))
  call tm.add(new Rule("write9", "8", "write9", "8", Dir.right))
  call tm.add(new Rule("write9", "9", "write9", "9", Dir.right))
  call tm.add(new Rule("write9", "]", "write9", "]", Dir.right))
  call tm.add(new Rule("write9", "I", "write9", "I", Dir.right))
  call tm.add(new Rule("write9", "V", "write9", "V", Dir.right))
  call tm.add(new Rule("write9", "X", "write9", "X", Dir.right))
  call tm.add(new Rule("write9", "|", "write9", "|", Dir.right))
  call tm.add(new Rule("write9", " ", "write10", "I", Dir.right))
  # Write10
  call tm.add(new Rule("write10", " ", "write0", "X", Dir.right))
  # return 
  call tm.add(new Rule("return", "0", "return", "0", Dir.left))
  call tm.add(new Rule("return", "1", "return", "1", Dir.left))
  call tm.add(new Rule("return", "2", "return", "2", Dir.left))
  call tm.add(new Rule("return", "3", "return", "3", Dir.left))
  call tm.add(new Rule("return", "4", "return", "4", Dir.left))
  call tm.add(new Rule("return", "5", "return", "5", Dir.left))
  call tm.add(new Rule("return", "6", "return", "6", Dir.left))
  call tm.add(new Rule("return", "7", "return", "7", Dir.left))
  call tm.add(new Rule("return", "8", "return", "8", Dir.left))
  call tm.add(new Rule("return", "9", "return", "9", Dir.left))
  call tm.add(new Rule("return", "I", "return", "I", Dir.left))
  call tm.add(new Rule("return", "V", "return", "V", Dir.left))
  call tm.add(new Rule("return", "X", "return", "X", Dir.left))
  call tm.add(new Rule("return", "|", "return", "|", Dir.left))
  call tm.add(new Rule("return", "]", "return", "]", Dir.left))
  call tm.add(new Rule("return", "[", "readNextDigit", " ", Dir.right))
  call tm.add(new Rule("return", " ", "readNextDigit", " ", Dir.right))
  # gotoEnd -  only after deleting input.
  call tm.add(new Rule("gotoEnd", "|", "gotoEnd", "|", Dir.right))
  call tm.add(new Rule("gotoEnd", "I", "gotoEnd", "I", Dir.right))
  call tm.add(new Rule("gotoEnd", "V", "gotoEnd", "V", Dir.right))
  call tm.add(new Rule("gotoEnd", "X", "gotoEnd", "X", Dir.right))
  call tm.add(new Rule("gotoEnd", " ", "deleteLastBar", " ", Dir.left))
  call tm.add(new Rule("deleteLastBar", "|", "symbols1", " ", Dir.left))
  # symbols1
  call tm.add(new Rule("symbols1", "I", "symbols1", "I", Dir.left))
  call tm.add(new Rule("symbols1", "V", "symbols1", "V", Dir.left))
  call tm.add(new Rule("symbols1", "X", "symbols1", "X", Dir.left))
  call tm.add(new Rule("symbols1", "|", "symbols10", "|", Dir.left))
  call tm.add(new Rule("symbols1", " ", "removeBars", " ", Dir.right))
  call tm.add(new Rule("symbols10", "I", "symbols10", "X", Dir.left))
  call tm.add(new Rule("symbols10", "V", "symbols10", "L", Dir.left))
  call tm.add(new Rule("symbols10", "X", "symbols10", "C", Dir.left))
  call tm.add(new Rule("symbols10", "|", "symbols100", "|", Dir.left))
  call tm.add(new Rule("symbols10", " ", "removeBars", " ", Dir.right))
  call tm.add(new Rule("symbols100", "I", "symbols100", "C", Dir.left))
  call tm.add(new Rule("symbols100", "V", "symbols100", "D", Dir.left))
  call tm.add(new Rule("symbols100", "X", "symbols100", "M", Dir.left))
  call tm.add(new Rule("symbols100", "|", "symbols1000", "|", Dir.left))
  call tm.add(new Rule("symbols100", " ", "removeBars", " ", Dir.right))
  call tm.add(new Rule("symbols1000", "I", "symbols1000", "M", Dir.left))
  call tm.add(new Rule("symbols1000", " ", "removeBars", " ", Dir.right))
  # Remove bars
  call tm.add(new Rule("removeBars", "|", "removeBars", " ", Dir.right))
  call tm.add(new Rule("removeBars", "I", "moveI", " ", Dir.right))
  call tm.add(new Rule("removeBars", "V", "moveV", " ", Dir.right))
  call tm.add(new Rule("removeBars", "X", "moveX", " ", Dir.right))
  call tm.add(new Rule("removeBars", "L", "moveL", " ", Dir.right))
  call tm.add(new Rule("removeBars", "C", "moveC", " ", Dir.right))
  call tm.add(new Rule("removeBars", "D", "moveD", " ", Dir.right))
  call tm.add(new Rule("removeBars", "M", "moveM", " ", Dir.right))
  call tm.add(new Rule("nextChar", "|", "nextChar", "|", Dir.right))
  call tm.add(new Rule("nextChar", " ", "checkForBars", " ", Dir.left))
  call tm.add(new Rule("nextChar", "I", "moveI", "|", Dir.right))
  call tm.add(new Rule("nextChar", "V", "moveV", "|", Dir.right))
  call tm.add(new Rule("nextChar", "X", "moveX", "|", Dir.right))
  call tm.add(new Rule("nextChar", "L", "moveL", "|", Dir.right))
  call tm.add(new Rule("nextChar", "C", "moveC", "|", Dir.right))
  call tm.add(new Rule("nextChar", "D", "moveD", "|", Dir.right))
  call tm.add(new Rule("nextChar", "M", "moveM", "|", Dir.right))
  # moveI
  call tm.add(new Rule("moveI", "|", "nextChar", "I", Dir.right))
  call tm.add(new Rule("moveI", "I", "writeI", "I", Dir.left))
  call tm.add(new Rule("moveI", "V", "writeI", "V", Dir.left))
  call tm.add(new Rule("moveI", "X", "writeI", "X", Dir.left))
  call tm.add(new Rule("moveI", " ", "writeI", " ", Dir.left))
  # moveV
  call tm.add(new Rule("moveV", "|", "nextChar", "V", Dir.right))
  call tm.add(new Rule("moveV", "I", "writeV", "I", Dir.left))
  call tm.add(new Rule("moveV", " ", "writeV", " ", Dir.left))
  # moveX 
  call tm.add(new Rule("moveX", "|", "nextChar", "X", Dir.right))
  call tm.add(new Rule("moveX", "I", "writeX", "I", Dir.left))
  call tm.add(new Rule("moveX", "V", "writeX", "V", Dir.left))
  call tm.add(new Rule("moveX", "X", "writeX", "X", Dir.left))
  call tm.add(new Rule("moveX", "L", "writeX", "L", Dir.left))
  call tm.add(new Rule("moveX", "C", "writeX", "C", Dir.left))
  call tm.add(new Rule("moveX", " ", "writeX", " ", Dir.left))
  # moveL 
  call tm.add(new Rule("moveL", "|", "nextChar", "L", Dir.right))
  call tm.add(new Rule("moveL", "I", "writeL", "I", Dir.left))
  call tm.add(new Rule("moveL", "V", "writeL", "V", Dir.left))
  call tm.add(new Rule("moveL", "X", "writeL", "X", Dir.left))
  call tm.add(new Rule("moveL", " ", "writeL", " ", Dir.left))
  # moveC 
  call tm.add(new Rule("moveC", "|", "nextChar", "C", Dir.right))
  call tm.add(new Rule("moveC", "I", "writeC", "I", Dir.left))
  call tm.add(new Rule("moveC", "V", "writeC", "V", Dir.left))
  call tm.add(new Rule("moveC", "X", "writeC", "X", Dir.left))
  call tm.add(new Rule("moveC", "L", "writeC", "L", Dir.left))
  call tm.add(new Rule("moveC", "C", "writeC", "C", Dir.left))
  call tm.add(new Rule("moveC", "D", "writeC", "D", Dir.left))
  call tm.add(new Rule("moveC", "M", "writeC", "M", Dir.left))
  call tm.add(new Rule("moveC", " ", "writeC", " ", Dir.left))
  # moveD 
  call tm.add(new Rule("moveD", "|", "nextChar", "D", Dir.right))
  call tm.add(new Rule("moveD", "I", "writeD", "I", Dir.left))
  call tm.add(new Rule("moveD", "V", "writeD", "V", Dir.left))
  call tm.add(new Rule("moveD", "X", "writeD", "X", Dir.left))
  call tm.add(new Rule("moveD", "L", "writeD", "L", Dir.left))
  call tm.add(new Rule("moveD", "C", "writeD", "C", Dir.left))
  call tm.add(new Rule("moveD", " ", "writeD", " ", Dir.left))
  # moveM
  call tm.add(new Rule("moveM", "|", "nextChar", "M", Dir.right))
  call tm.add(new Rule("moveM", "I", "writeM", "I", Dir.left))
  call tm.add(new Rule("moveM", "V", "writeM", "V", Dir.left))
  call tm.add(new Rule("moveM", "X", "writeM", "X", Dir.left))
  call tm.add(new Rule("moveM", "L", "writeM", "L", Dir.left))
  call tm.add(new Rule("moveM", "C", "writeM", "C", Dir.left))
  call tm.add(new Rule("moveM", "D", "writeM", "D", Dir.left))
  call tm.add(new Rule("moveM", "M", "writeM", "M", Dir.left))
  call tm.add(new Rule("moveM", " ", "writeM", " ", Dir.left))
  # write char
  call tm.add(new Rule("writeI", "|", "nextChar", "I", Dir.right))
  call tm.add(new Rule("writeI", " ", "nextChar", "I", Dir.right))
  call tm.add(new Rule("writeV", "|", "nextChar", "V", Dir.right))
  call tm.add(new Rule("writeV", " ", "nextChar", "V", Dir.right))
  call tm.add(new Rule("writeX", "|", "nextChar", "X", Dir.right))
  call tm.add(new Rule("writeX", " ", "nextChar", "X", Dir.right))
  call tm.add(new Rule("writeL", "|", "nextChar", "L", Dir.right))
  call tm.add(new Rule("writeL", " ", "nextChar", "L", Dir.right))
  call tm.add(new Rule("writeC", "|", "nextChar", "C", Dir.right))
  call tm.add(new Rule("writeC", " ", "nextChar", "C", Dir.right))
  call tm.add(new Rule("writeD", "|", "nextChar", "D", Dir.right))
  call tm.add(new Rule("writeD", " ", "nextChar", "D", Dir.right))
  call tm.add(new Rule("writeM", "|", "nextChar", "M", Dir.right))
  call tm.add(new Rule("writeM", " ", "nextChar", "M", Dir.right))
  # checkForBars 
  call tm.add(new Rule("checkForBars", "I", "checkForBars", "I", Dir.left))
  call tm.add(new Rule("checkForBars", "V", "checkForBars", "V", Dir.left))
  call tm.add(new Rule("checkForBars", "X", "checkForBars", "X", Dir.left))
  call tm.add(new Rule("checkForBars", "L", "checkForBars", "L", Dir.left))
  call tm.add(new Rule("checkForBars", "C", "checkForBars", "C", Dir.left))
  call tm.add(new Rule("checkForBars", "D", "checkForBars", "D", Dir.left))
  call tm.add(new Rule("checkForBars", "M", "checkForBars", "M", Dir.left))
  call tm.add(new Rule("checkForBars", "|", "barFound", "|", Dir.left))
  call tm.add(new Rule("checkForBars", " ", "halt", " ", Dir.right))
  # barFound
  call tm.add(new Rule("barFound", "I", "barFound", "I", Dir.left))
  call tm.add(new Rule("barFound", "V", "barFound", "V", Dir.left))
  call tm.add(new Rule("barFound", "X", "barFound", "X", Dir.left))
  call tm.add(new Rule("barFound", "L", "barFound", "L", Dir.left))
  call tm.add(new Rule("barFound", "C", "barFound", "C", Dir.left))
  call tm.add(new Rule("barFound", "D", "barFound", "D", Dir.left))
  call tm.add(new Rule("barFound", "M", "barFound", "M", Dir.left))
  call tm.add(new Rule("barFound", "|", "barFound", "|", Dir.left))
  call tm.add(new Rule("barFound", " ", "removeBars", " ", Dir.right))
end procedure

procedure convertToRoman(tm as TuringMachine, tape as String)
  call tm.reset()
  call tm.setTape(tape)
  call tm.runToEnd()
end procedure

test 
  var tm set to new TuringMachine("init", "halt")
  call addRulesForRomanNumeralsInto(tm)
  call convertToRoman(tm, "1")
  assert tm.getTrimmedTape() is "I"
  call convertToRoman(tm, "2")
  assert tm.getTrimmedTape() is "II"
  call convertToRoman(tm, "3")
  assert tm.getTrimmedTape() is "III"
  call convertToRoman(tm, "4")
  assert tm.getTrimmedTape() is "IV"
  call convertToRoman(tm, "5")
  assert tm.getTrimmedTape() is "V"
  call convertToRoman(tm, "6")
  assert tm.getTrimmedTape() is "VI"
  call convertToRoman(tm, "7")
  assert tm.getTrimmedTape() is "VII"
  call convertToRoman(tm, "8")
  assert tm.getTrimmedTape() is "VIII"
  call convertToRoman(tm, "9")
  assert tm.getTrimmedTape() is "IX"
  call convertToRoman(tm, "10")
  assert tm.getTrimmedTape() is "X"
  call convertToRoman(tm, "11")
  assert tm.getTrimmedTape() is "XI"
  call convertToRoman(tm, "14")
  assert tm.getTrimmedTape() is "XIV"
  call convertToRoman(tm, "15")
  assert tm.getTrimmedTape() is "XV"
  call convertToRoman(tm, "17")
  assert tm.getTrimmedTape() is "XVII"
  call convertToRoman(tm, "19")
  assert tm.getTrimmedTape() is "XIX"
  call convertToRoman(tm, "20")
  assert tm.getTrimmedTape() is "XX"
  call convertToRoman(tm, "21")
  assert tm.getTrimmedTape() is "XXI"
  call convertToRoman(tm, "25")
  assert tm.getTrimmedTape() is "XXV"
  call convertToRoman(tm, "28")
  assert tm.getTrimmedTape() is "XXVIII"
  call convertToRoman(tm, "29")
  assert tm.getTrimmedTape() is "XXIX"
  call convertToRoman(tm, "30")
  assert tm.getTrimmedTape() is "XXX"
  call convertToRoman(tm, "37")
  assert tm.getTrimmedTape() is "XXXVII"
  call convertToRoman(tm, "41")
  assert tm.getTrimmedTape() is "XLI"
  call convertToRoman(tm, "50")
  assert tm.getTrimmedTape() is "L"
  call convertToRoman(tm, "54")
  assert tm.getTrimmedTape() is "LIV"
  call convertToRoman(tm, "79")
  assert tm.getTrimmedTape() is "LXXIX"
  call convertToRoman(tm, "95")
  assert tm.getTrimmedTape() is "XCV"
  call convertToRoman(tm, "333")
  assert tm.getTrimmedTape() is "CCCXXXIII"
  call convertToRoman(tm, "444")
  assert tm.getTrimmedTape() is "CDXLIV"
  call convertToRoman(tm, "555")
  assert tm.getTrimmedTape() is "DLV"
  call convertToRoman(tm, "666")
  assert tm.getTrimmedTape() is "DCLXVI"
  call convertToRoman(tm, "999")
  assert tm.getTrimmedTape() is "CMXCIX"
  call convertToRoman(tm, "1066")
  assert tm.getTrimmedTape() is "MLXVI"
  call convertToRoman(tm, "1966")
  assert tm.getTrimmedTape() is "MCMLXVI"
end test

# 928503d59be4f3cc97118eaf580cf20415f1f3fedcd0fd246306e1b26260d9c5 Elan v0.1 valid

main
  print "Press any key to halt"
  var cm set to new Graphics()
  set cm to cm.fill("", white, white)
  var starter set to empty [Boolean]
  call fillRandom(starter)
  var grid set to starter.asImmutableList()
  while cm.getKeystroke() is ""
    set cm to updateGraphics(grid, cm)
    call cm.draw()
    set grid to nextGeneration(grid)
    call pause(50)
  end while
end main

procedure fillRandom(starter as [Boolean])
  for i from 0 to 399 step 1
    call starter.add(random() > 0.5)
  end for
end procedure

function updateGraphics(grid as {Boolean}, cm as Graphics) return Graphics
  var cm2 set to cm
  for row from 0 to 19 step 1
    for col from 0 to 19 step 1
      var cell set to grid.get(col*20 + row)
      if cell
        then
          set cm2 to cm2.putBackground(col, row, black)
        else
          set cm2 to cm2.putBackground(col, row, white)
      end if
    end for
  end for
  return cm2
end function

function north(c as Int) return Int
  return if c > 19 then c - 20 else c + 380
end function

function south(c as Int) return Int
  return if c < 380 then c + 20 else c - 380
end function

function east(c as Int) return Int
  return if mod(c, 20) < 19 then c + 1 else c - 19
end function

function west(c as Int) return Int
  return if mod(c, 20) > 0 then c - 1 else c + 19
end function

function northEast(c as Int) return Int
  return north(east(c))
end function

function southEast(c as Int) return Int
  return south(east(c))
end function

function northWest(c as Int) return Int
  return north(west(c))
end function

function southWest(c as Int) return Int
  return south(west(c))
end function

function neighbourCells(c as Int) return {Int}
  return {northWest(c), north(c), northEast(c), west(c), east(c), southWest(c), south(c), southEast(c)}
end function

function liveNeighbours(cells as {Boolean}, c as Int) return Int
  let neighbours be neighbourCells(c)
  let live be neighbours.filter(lambda i as Int => cells.get(i))
  return live.length()
end function

function willLive(currentlyAlive as Boolean, liveNeighbours as Int) return Boolean
  return if currentlyAlive then (liveNeighbours > 1) and (liveNeighbours < 4) else liveNeighbours is 3
end function

function nextCellValue(cells as {Boolean}, c as Int) return Boolean
  return willLive(cells.get(c), liveNeighbours(cells, c))
end function

function nextGeneration(cells as {Boolean}) return {Boolean}
  let cellRange be range(0, cells.length() - 1)
  let next be cellRange.map(lambda n as Int => nextCellValue(cells, n))
  return next.asImmutableList()
end function

constant black set to 0x000000

constant white set to 0xffffff

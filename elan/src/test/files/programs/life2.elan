# 332ce1169cf4f5e718a260350c13fc3c89ecee1430962c8b7aa6dc8918b57864 Elan v0.1 valid

main
  var grid set to empty [Boolean]
  call fillRandom(grid)
  var cm set to convertGridToGraphics(exampleCells)
  var grid set to exampleCells
  for i from 1 to 100 step 1
    set cm to updateGraphics(grid, cm)
    call cm.draw()
    set grid to nextGeneration(grid)
    call pause(50)
  end for
end main

function updateGraphics(grid as {Boolean}, cm as Graphics) return Graphics
  var cm2 set to cm
  for row from 0 to 19 step 1
    for col from 0 to 19 step 1
      var cell set to grid.get(col*20 + row)
      if cell
        then
          set cm2 to cm2.putBackground(col, row, black)
        else
          set cm2 to cm2.putBackground(col, row, white)
      end if
    end for
  end for
  return cm2
end function


function convertGridToGraphics(grid as {Boolean}) return Graphics
  var cm set to new Graphics()
  set cm to cm.fill(black, white, "")
  for x from 0 to 39 step 1
    for y from 0 to 29 step 1
      var isAlive set to grid.get(y*40 + x)
      var colour set to if isAlive then black else white
      set cm to cm.putBackground(x, y, colour)
    end for
  end for
  return cm
end function

procedure fillRandom(grid as [Boolean])
  for i from 0 to 1199 step 1
    call grid.add(random() > 0.5)
  end for
end procedure

function willLive(currentlyAlive as Boolean, liveNeighbours as Int) return Boolean
  return if currentlyAlive then (liveNeighbours > 1) and (liveNeighbours < 4) else liveNeighbours is 3
end function

test 
  assert willLive(false, 0) is false
  assert willLive(false, 1) is false
  assert willLive(false, 2) is false
  assert willLive(false, 3) is true
  assert willLive(false, 4) is false
  assert willLive(false, 5) is false
  assert willLive(false, 6) is false
  assert willLive(false, 7) is false
  assert willLive(false, 8) is false
  assert willLive(true, 0) is false
  assert willLive(true, 1) is false
  assert willLive(true, 2) is true
  assert willLive(true, 3) is true
  assert willLive(true, 4) is false
  assert willLive(true, 5) is false
  assert willLive(true, 6) is false
  assert willLive(true, 7) is false
  assert willLive(true, 8) is false
end test

function nextCellValue(cells as {Boolean}, c as Int) return Boolean
  return willLive(cells.get(c), liveNeighbours(cells, c))
end function

test 
  assert nextCellValue(exampleCells, 0) is false
  assert nextCellValue(exampleCells, 19) is false
  assert nextCellValue(exampleCells, 30) is true
  assert nextCellValue(exampleCells, 44) is true
  assert nextCellValue(exampleCells, 59) is false
  assert nextCellValue(exampleCells, 60) is true
  assert nextCellValue(exampleCells, 399) is true
end test

function nextGeneration(cells as {Boolean}) return {Boolean}
  let cellRange be range(0, cells.length() - 1)
  let next be cellRange.map(lambda n as Int => nextCellValue(cells, n))
  return next.asImmutableList()
end function

test 
  var expected set to {false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, true, false, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, true, true, false, false, false, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, true, false, true, true, false, false, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, false, false, false, false, false, false, true, true, false, false, false, true, false, false, false, true, true, false, false, false, true, false, true, false, true, false, false, false, true, true, true, true}
  var actual set to nextGeneration(exampleCells)
  assert actual is expected
end test

constant black set to 0x000000

constant white set to 0xffffff

constant exampleCells set to {false, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, true, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false}

# 87674e593e61fc1a9556a6fea7d43080ff8a017d769e3c48ce11e2c4fa20ee85 Elan v0.1 valid

main
  var li set to ["plum", "apricot", "lime", "lemon", "melon", "apple", "orange", "strawberry", "pear"]
  print mergeSort(li)
end main

function mergeSort(list as List<of String>) return List<of String>
  var result set to new List<of String>()
  if list.length() > 1
    var mid set to list.length() div 2
    set result to merge(mergeSort(list[..mid]), mergeSort(list[mid..]))
  end if
  return result
end function

function merge(a as List<of String>, b as List<of String>) return List<of String>
  var result set to new List<of String>()
  if a.length() is 0
    set result to b
    else if b.length() is 0
      set result to a
    else if isBefore(a[0], b[0])
      set result to [a[0]] + merge(a[1..], b)
    else
      set result to [b[0]] + merge(a, b[1..])
  end if
  return result
end function

test mergeSort
  var li1 set to new List<of String>()
  assert mergeSort(li1) is li1
  var li2 set to ["plum"]
  assert mergeSort(li2) is li2
  var li3 set to ["plum", "apricot", "lime", "lemon", "melon", "apple", "orange", "strawberry", "pear"]
  var expected3 set to ["apple", "apricot", "lemon", "lime", "melon", "orange", "pear", "plum", "strawberry"]
  assert mergeSort(li3) is expected3
  var li4 set to ["plum", "apricot", "lime", "lemon", "melon", "apple", "orange", "strawberry"]
  var expected4 set to ["apple", "apricot", "lemon", "lime", "melon", "orange", "pear", "strawberry"]
  assert mergeSort(li4) is expected4
  var li5 set to ["apple", "apricot", "lemon", "lime", "melon", "orange", "pear", "strawberry"]
  assert mergeSort(li5) is li5
end test

# 31e0f0ddde8de0845eb8faeedb23c9763b28176189ea3c9dd956a8c13d464693 Elan v0.1 valid

main
  # TODO
end main

function isYellow(attempt as String, target as String, n as Int) return Boolean
  return target.contains(attempt[n])
end function

function setAttemptIfYellow(attempt as String, target as String, n as Int) return String
  return if attempt[n] is "*" then attempt else if attempt.isYellow(target, n) then attempt.setChar(n, "+") else attempt.setChar(n, "_")
end function

function setTargetIfYellow(attempt as String, target as String, n as Int) return String
  return if attempt.isAlreadyMarkedGreen(n) then target else if attempt.isYellow(target, n) then target.setChar(target.indexOf(attempt[n]), ".") else target
end function

function isGreen(attempt as String, target as String, n as Int) return Boolean
  return target[n] is attempt[n]
end function

function setChar(word as String, n as Int, newChar as Char) return String
  return word[..n] + newChar + word[n + 1..]
end function

function setAttemptIfGreen(attempt as String, target as String, n as Int) return String
  return if attempt.isGreen(target, n) then attempt.setChar(n, "*") else attempt
end function

function setTargetIfGreen(attempt as String, target as String, n as Int) return String
  return if attempt.isGreen(target, n) then target.setChar(n, ".") else target
end function

function isAlreadyMarkedGreen(attempt as String, n as Int) return Boolean
  return attempt[n] is "*"
end function

function evaluateGreens(attempt as String, target as String) return (String, String)
  return letterPositions.reduce((attempt, target), lambda a as (String, String), x as Int => (setAttemptIfGreen(a.attempt, a.target, x), setTargetIfGreen(a.attempt, a.target, x)))
end function

function evaluateYellows(attempt as String, target as String) return (String, String)
  return letterPositions.reduce((attempt, target), lambda a as (String, String), x as Int => (setAttemptIfYellow(a.attempt, a.target, x), setTargetIfYellow(a.attempt, a.target, x)))
end function

function markAttempt(attempt as String, target as String) return String
  let (attemptAfterGreens, targetAfterGreens) be evaluateGreens(attempt, target)
  let markedAttempt be attemptAfterGreens.evaluateYellows(targetAfterGreens)
  return markedAttempt.first()
end function


constant letterPositions set to {0, 1, 2, 3, 4}

# Both lists of words below are truncated. Full lists are 2309 words & 15,000+ words respectively
constant allPossibleAnswers set to {"ABACK", "ABASE", "ABATE", "ABBEY", "ABBOT", "ABHOR", "ABIDE", "ABLED", "ABODE", "ABORT", "ABOUT", "ABOVE"}

constant validWords set to {"ABACK", "ABASE", "ABATE", "ABBEY", "ABBOT", "ABHOR", "ABIDE", "ABLED", "ABODE", "ABORT", "ABOUT", "ABOVE"}

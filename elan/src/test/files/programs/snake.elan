# 2efd2c4c3d480421646f41acfee589f4afdc62fa1d96d89503546b3f43b01454 Elan v0.1 valid

main
  var currentDirection set to Direction.up
  var snake set to new Snake(40, 30, currentDirection)
  call snake.setNewApplePosition()
  var cm set to new Graphics()
  set cm to cm.fill("", black, white)
  var gameOn set to true
  while gameOn
    set cm to snake.updateGraphics(cm)
    call cm.draw()
    call pause(150)
    var k set to getKeystroke()
    set currentDirection to if k is "" then currentDirection else directionByKey.getKey(k)
    call snake.clockTick(currentDirection)
    set gameOn to not snake.gameOver()
  end while
  print "Game Over! Score: {snake.length() - 1}"
end main

class Snake
  constructor(boardWidth as Int, boardHeight as Int, startingDirection as Direction)
    set property.boardWidth to boardWidth
    set property.boardHeight to boardHeight
    var tail set to new Square(div(boardWidth, 2), div(boardHeight, 2))
    set body to [tail]
    set head to tail.getAdjacentSquare(startingDirection)
  end constructor

  property head as Square

  property body as [Square]

  property apple as Square

  property boardHeight as Int

  property boardWidth as Int

  property priorTail as Square

  function length() return Int
    return body.length()
  end function

  function gameOver() return Boolean
    return hasHitEdge() or bodyCovers(head)
  end function

  function hasHitEdge() return Boolean
    return (head.x < 0) or (head.y < 0) or (head.x is boardWidth) or (head.y is boardHeight)
  end function

  function bodyCovers(sq as Square) return Boolean
    var result set to false
    each seg in body
      if (seg is sq)
        then
          set result to true
      end if
    end each
    return result
  end function

  function updateGraphics(cm as Graphics) return Graphics
    var cm2 set to cm.putBackground(head.x, head.y, green)
    set cm2 to cm2.putBackground(apple.x, apple.y, red)
    if body[0] is not priorTail
      then
        set cm2 to cm2.putBackground(priorTail.x, priorTail.y, white)
    end if
    return cm2
  end function

  procedure clockTick(d as Direction)
    set priorTail to body[0]
    call body.add(head)
    set head to head.getAdjacentSquare(d)
    if head is apple
      then
        call setNewApplePosition()
      else
        set body to body[1..]
    end if
  end procedure

  procedure setNewApplePosition()
    repeat
      var w set to boardWidth - 1
      var h set to boardHeight - 1
      var ranW set to randomInt(0, w)
      var ranH set to randomInt(0, h)
      set apple to new Square(ranW, ranH)
    end repeat when not bodyCovers(apple)
  end procedure

end class

immutable class Square
  constructor(x as Int, y as Int)
    set property.x to x
    set property.y to y
  end constructor

  property x as Int

  property y as Int

  function getAdjacentSquare(d as Direction) return Square
    var newX set to x
    var newY set to y
    switch d
      case Direction.left
        set newX to x - 1
      case Direction.right
        set newX to x + 1
      case Direction.up
        set newY to y - 1
      case Direction.down
        set newY to y + 1
      default

    end switch
    return new Square(newX, newY)
  end function

  function asString() return String
    return "x{x}y{y}"
  end function

end class

enum Direction
  up, down, left, right
end enum

constant directionByKey set to {"w":Direction.up, "s":Direction.down, "a":Direction.left, "d":Direction.right}

constant green set to 0x00ff00

constant red set to 0xff0000

constant white set to 0xffffff

constant black set to 0x000000

test square
  var tail set to new Square(20, 15)
  var expected set to new Square(20, 15)
  assert tail is expected
  var head set to tail.getAdjacentSquare(Direction.right)
  let exp2 be new Square(21, 15)
  assert head is exp2
end test

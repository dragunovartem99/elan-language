# 0d1f0a1ddaa13f7212762c0cfb1de287b3ee0a0e0948f129124f9ae1dd7a1602 Elan v0.1 valid

main
  print welcome
  external readKey()
  var newGame set to true
  while newGame
    call playGame()
    print "Do you want to play again (y/n)?"
    var answer set to ' '
    repeat
      external readKey() into answer
    end repeat when answer is 'y' or answer is 'n'
    if answer is 'n'
      set newGame to false
    end if
  end while
end main

constant welcome set to "Welcome to the Snake game."

procedure playGame()
  var charMap set to new CharMap()
  call charMap.fillBackground()
  var currentDirection set to Direction.right
  var snake set to new Snake(charMap.width div 2, charMap.height, currentDirection)
  var gameOn set to true
  while gameOn
    external keyHasBeenPressed() into pressed
    call pause(200)
    call snake.clockTick(currentDirection, gameOn)
    if snake.hasHitEdge() or snake.bodyCovers(head)
      set gameOn to false
      else
        call draw(charMap, snake.head, Colour.green)
        call draw(charMap, snake.apple, Colour.red)
        var priorTail set to snake.tail()
        if pressed
          external readKey()
          set currentDirection to directionByKey[k]
        end if
        if snake.tail() is not priorTail
          call draw(charMap, priorTail, charMap.backgroundColour)
        end if
    end if
  end while
  call charMap.setCursor(0, 0)
  print "Game Over! Score: [snake.length() - 2]"
end procedure

procedure draw(cm as CharMap, sq as Square, colour as Colour)
  call cm.putBlockWithColour(col, row, colour)
  var colPlus set to col + 1
  call cm.putBlockWithColour(colPlus, row, colour)
  var col set to sq.x * 2
  var row set to sq.y
end procedure

class Snake
  constructor(boardWidth as Int, boardHeight as Int, startingDirection as Direction)
    set property.boardWidth to boardWidth
    set property.boardHeight to boardHeight
    var tail set to new Square(boardWidth div 2, boardHeight div 2)
    set body to [tail]
    set head to tail.getAdjacentSquare(startingDirection)
    call setNewApplePosition()
  end constructor

  property head as Square

  private property body as List<of Square>

  function tail() return Square
    return body[0]
  end function

  function length() return Int
    return body.length()
  end function

  property boardHeight as Int

  property boardWidth as Int

  function bodyCovers(sq as Square) return Bool
    var result set to false
    each seg in body
      if (seg is sq)
        set result to true
      end if
    end each
    return result
  end function

  procedure clockTick(d as Direction)
    set body to body + head
    set head to head.getAdjacentSquare(d)
    if head is apple
      call setNewApplePosition()
      else
        set body to body[1..]
    end if
  end procedure

  function hasHitEdge() return Bool
    return head.x < 0 or head.y < 0 or head.x is boardWidth or head.y is boardHeight
  end function

  procedure setNewApplePosition()
    repeat
      var w set to boardWidth - 1
      var h set to boardHeight - 1
      external random(w) into ranW
      external random(h) into ranH
      set apple to new Square(ranW, ranH)
    end repeat when not bodyCovers(apple)
  end procedure

  property apple as Square

end class

constant directionByKey set to ['w': Direction.up, 's': Direction.down, 'a': Direction.left, 'd': Direction.right]

class Square
  constructor(x as Int, y as Int)
    set property.x to x
    set property.y to y
  end constructor

  property y as Int

  property x as Int

  function getAdjacentSquare(d as Direction) return Square
    var newX set to x
    var newY set to y
    switch d
      case Direction.left
        set newX to newX - 1
      case Direction.right
        set newX to newX + 1
      case Direction.up
        set newY to newY - 1
      case Direction.down
        set newY to newY + 1
      default

    end switch
    return new Square(newX, newY)
  end function

end class

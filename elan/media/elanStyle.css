:root {
    --selection:rgb(173, 214, 255);
    /* --unused: rgb(175,0,219); */
    --valid: rgb(146, 236, 146); 
    --incomplete: rgba(255, 166, 0);
    --invalid:  rgba(255, 0, 0, 0.617);
}
code { 
    padding: 0px;
}

* {
    color: black;
    font-family: consolas;
    font-size: 11pt;
    background-color: white;
    border-color: white;
}

*:focus {
    outline: none;
}

hash {
    display: none;
}

input, input:focus , input:active{
    border: none;
    outline: none;
    padding: 0px;
    margin: 0px;
}

/* Basic Colour scheme */
span {
    background-color: inherit;
}

keyword {
    color: rgb(56,0,255);
}

type {
    color: rgb(38,127,153
    );
}

comment, header, header *{
    color: green;
}

.string {
    color: rgb(165, 2, 2);
}

/* Horizontal and vertical layout */
statement, constructor, property, classDef > function, classDef > procedure, classDef > member {
    display: block;
    background-color: white;
    border-left-style: solid;
    border-left-width: 2ch;
}

header, constant, main, procedure, function, enum, classDef, constructor, property, member, global {
    display: block;
    padding-bottom: 1ch;
}

/* Frame selection */
.selected > * , .selected > clause *{
    border-left-color: var(--selection);
}

.selected > clause *, .selected > top, .selected > top *, .selected > keyword, .selected > text, .selected > text * , .selected > options {
    background-color: var(--selection);
    border-right-color: var(--selection);
}

/* Status colouring*/
text.selected.valid, text.selected.valid *, header .valid, .valid expand{
    background-color: var(--valid);
}

text.selected.incomplete, text.selected.incomplete *, header .incomplete, .incomplete expand{
    background-color: var(--incomplete);
}

text.selected.invalid, text.selected.invalid * , header .invalid, .invalid expand{
    background-color: var(--invalid);
}

/* helpers */
prompt {
    color: lightgrey;
}
::placeholder, .selected > options {
    color: white;
}

/* Text entry validation */
text.incomplete {
    color: var(--incomplete);
}
text.invalid, type.invalid {
    color: var(--invalid);
}

/* Collapse / Expand */
expand {
    display: none;
}

.multiline.collapsed expand {
    display:inline;
    font-weight: bold;
    color: white;
    margin-right: 1ch;
    cursor: pointer;
}

.multiline.collapsed > :not(top)
{
    display: none;
}
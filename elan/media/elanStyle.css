:root {
    --selection:rgb(173, 214, 255);
    --valid: rgb(169, 247, 169); 
    --incomplete: rgb(246, 193, 94);
    --invalid:  rgb(248, 74, 74);
}
code { 
    padding: 0px;
}

* {
    color: black;
    font-family: consolas;
    font-size: 11pt;
    background-color: white;
    border-color: white;
}

*:focus {
    outline: none;
}

input, input:focus , input:active{
    border: none;
    outline: none;
    padding: 0px;
    margin: 0px;
    caret-color: black;
}

/* Basic Colour scheme */

hash {
    display: none;
}

span {
    background-color: inherit;
}

keyword {
    color: rgb(56,0,255);
}
method, method field.valid text {
    color: rgb(152, 118, 49);
}
type {
    color: rgb(38,127,153
    );
}
string {
    color: rgb(165, 2, 2);
}
/* Header */
header, header * {
    color: green;
}
header .invalid {
    color: var(--invalid)
}
header .incomplete {
    color: var(--incomplete)
}
header .valid {
    color: var(--valid)
}

/* Horizontal and vertical spacing */
statement, constructor, property, classDef > function, classDef > procedure, classDef > member {
    display: block;
    background-color: white;
    border-left-style: solid;
    border-left-width: 2ch;
}

header, constant, main, procedure, function, enum, classDef, constructor, property, member, global, test {
    display: block;
    padding-bottom: 1ch;
}

/* Frame selection */
.selected > * , .selected > clause *{
    border-left-color: var(--selection);
}

.selected > clause *, .selected > top, .selected > top *, .selected > keyword, .selected > field, .selected > field *, .selected > text, .selected > placeholder, .selected > completion {
    background-color: var(--selection);
    border-right-color: var(--selection);
}

/* Multline Collapse / Expand */
expand {
    display: none;
}
.multiline.collapsed > :not(top) {
    display: none;
}
.multiline.collapsed expand {
    display:inline;
    font-weight: bold;
    color: white;
    margin-right: 1ch;
    /* cursor: pointer; why only this? */
}
.multiline.collapsed.invalid expand {
    background-color: var(--invalid);
}
.multiline.collapsed.incomplete expand {
    background-color: var(--incomplete);
}
.multiline.collapsed.valid expand {
    background-color: var(--valid);
}

/* Fields */
/* field-text*/
field.invalid text {
    color: var(--invalid);
}
field.incomplete text {
    color: var(--incomplete);
}
field.valid text {
    color: black; /* redundant rule - as black by default - but included for clarity */
}
field.selected.invalid text, field.selected.invalid input  {
    background-color: var(--invalid);
    color: black;
}
field.selected.incomplete text, field.selected.incomplete input {
    background-color: var(--incomplete);
    color: black;
}
field.selected.valid text, field.selected.valid input {
    background-color: var(--valid);
    color: black;
}
field.selected.valid.optional.empty text, field.selected.valid.optional.empty input {
    background-color: lightgrey;
    color: white;
}
input::placeholder {
    color: white;
}
/* field-placeholder */
field placeholder {
  display: none;
}
field.empty placeholder {
    display:inline;
    color: var(--incomplete);
}
field.empty.optional placeholder {
    display:none;
    color: lightgrey;
}
.selected > top field.empty placeholder, .selected > field.empty placeholder {
    display:inline;
    color: var(--incomplete);
}
.selected > top field.empty.optional placeholder, .selected > field.empty.optional placeholder {
    display:inline;
    color: white;
}

field.selected placeholder { 
    display: none; /* because contents of placeholder will be put into placeholder */
}
field.selected ~ field.empty placeholder, field.selected ~ field.empty.optional placeholder{
    display: inline;
}

/* selector placeholder */
global placeholder, member placeholder, statement placeholder  {
    display: none;
}
global.empty placeholder, member.empty placeholder, statement.empty placeholder {
    display: inline;
    color: lightgrey;
}

global.empty.selected placeholder, member.empty.selected placeholder, statement.empty.selected placeholder {
    display: none;
}

/* field-completion */
field completion, global completion, member completion, statement completion  {
    display: none;
}
field.selected completion {
    display: inline;
    color: white;
    background-color: var(--incomplete);
}

/* selector completion */
global completion, member completion, statement completion  {
    display: none;
}
 global.selected completion, member.selected completion, statement.selected completion {
    display: inline;
    color: white;
 }

 /* Comments */
 comment, comment top, comment field.valid text, comment keyword {
    color: green;
}

parseError {
    color: red;
}

/* Selectors */
selector * {
  background-color: white;
  color: lightgrey;
}
.selected > selector * {
  background-color: lightgrey;
  color: white;
}
.selected > selector text {
  color: black;
}

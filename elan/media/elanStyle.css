:root {
    --defaultBackground: white;
    --defaultText: black;
    --reverseText: white;

    --selection:rgb(173, 214, 255);
    --valid: rgb(169, 247, 169); 
    --incomplete: rgb(246, 193, 94);
    --invalid:  rgb(248, 74, 74);
    --optional:  lightgrey;

    --keyword: rgb(56,0,255);
    --method: rgb(152, 118, 49);
    --type:  rgb(38,127,153);
    --string:  rgb(165, 2, 2);
    --comment: green;
}

code { 
    padding: 0px;
}

* {
    color: var(--defaultText);
    font-family: consolas;
    font-size: 11pt;
    background-color: var(--defaultBackground);
    border-color: var(--defaultBackground);
}

*:focus {
    outline: none;
}

input, input:focus , input:active{
    border: none;
    outline: none;
    padding: 0px;
    margin: 0px;
    caret-color: var(--defaultText);
}

/* Basic Colour scheme */

hash {
    display: none;
}

span {
    background-color: inherit;
}
keyword {
    color: var(--keyword);
} 
method, method field.valid text {
    color: var(--method);
}
type {
    color: var(--type);
}
string {
    color: var(--string);
}
field.incomplete, field.incomplete  keyword, field.incomplete  type, field.incomplete  string, field.incomplete method {
    color: var(--incomplete);
}
.invalid field, field.invalid  keyword, field.invalid  type, field.invalid  string, field.invalid method {
    color: var(--invalid);
}
/* Header & comments */
comment *, comment field.valid text  {
    color: var(--comment);
}

header, header * {
    color: var(--comment);
}
header .invalid {
    color: var(--invalid)
}
header .incomplete {
    color: var(--incomplete)
}
header .valid {
    color: var(--valid)
}


/* Horizontal and vertical spacing */
statement, constructor, property, classDef > function, classDef > procedure, classDef > member {
    display: block;
    background-color: var(--defaultBackground);
    border-left-style: solid;
    border-left-width: 2ch;
}

header, constant, main, procedure, function, enum, classDef, constructor, property, member, global, test {
    display: block;
    padding-bottom: 1ch;
}

/* Frame selection */
.selected > * , .selected > clause *{
    border-left-color: var(--selection);
}

.selected > clause *, .selected > top, .selected > top *, .selected > keyword, .selected > field, .selected > field *, .selected > text, .selected > placeholder, .selected > completion {
    background-color: var(--selection);
    border-right-color: var(--selection);
}

/* Multline Collapse / Expand */
expand {
    display: none;
}
.multiline.collapsed > :not(top) {
    display: none;
}
.multiline.collapsed expand {
    display:inline;
    font-weight: bold;
    color: var(--reverseText);
    margin-right: 1ch;
    /* cursor: pointer; why only this? */
}
.multiline.collapsed.invalid expand {
    background-color: var(--invalid);
}
.multiline.collapsed.incomplete expand {
    background-color: var(--incomplete);
}
.multiline.collapsed.valid expand {
    background-color: var(--valid);
}

/* Fields */
/* field-text*/
field.invalid text {
    color: var(--invalid);
}
field.incomplete text {
    color: var(--incomplete);
}
field.valid text {
    color: var(--defaultText);
}
field.selected.invalid text, field.selected.invalid input  {
    background-color: var(--invalid);
    color: var(--defaultText);
}
field.selected.incomplete text, field.selected.incomplete input {
    background-color: var(--incomplete);
    color: var(--defaultText);
}
field.selected.valid text, field.selected.valid input {
    background-color: var(--valid);
    color: var(--defaultText);
}
field.selected.valid.optional.empty text, field.selected.valid.optional.empty input {
    background-color: var(--optional);
    color: var(--reverseText);
}

/* field-placeholder */
field placeholder {
  display: none;
}

field.empty placeholder {
    display: inline;
    color: var(--incomplete);
}

field.empty.optional placeholder {
    display: none;
}

field.empty.selected placeholder {
    display: inline;
    color: var(--reverseText);
    background-color: var(--incomplete);
}

field.empty.optional.selected placeholder {
    display:inline;
    color: var(--reverseText);
    background-color: var(--optional);
}

.selected > top field.empty placeholder, .selected > field.empty placeholder {
    display:inline;
    color: var(--incomplete);
}
.selected > top field.empty.optional placeholder, .selected > field.empty.optional placeholder {
    display:inline;
    color: var(--reverseText);
}
field.selected ~ field.empty placeholder, field.selected ~ field.empty.optional placeholder{
    display: inline;
}

/* field-completion */
completion  {
    display: none;
}
field.selected completion{
    display: inline;
    color: var(--reverseText);
    background-color: var(--incomplete);
}
field.selected.empty completion {
    display: none;
}

/* Selectors */
  selector * {
    background-color: var(--reverseText);
    color: var(--optional);
  }
  selector help {
    display: none; 
  }
  .selected > selector help {
    display: inline;
    background-color: var(--optional);
    color: var(--reverseText);
  }
  .selected > selector text {
    color: var(--defaultText);
  }

  /* placeholder */
selector placeholder  {
    display: none;
}
.empty > selector placeholder {
    display: inline;
    color: var(--optional);
}
.selected > selector placeholder {
    display: none;
}




parseError {
    color: var(--invalid);
}



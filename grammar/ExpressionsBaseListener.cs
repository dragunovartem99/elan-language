//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Elan//Repository//Parser//Expressions.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IExpressionsListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class ExpressionsBaseListener : IExpressionsListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.namespace"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamespace([NotNull] ExpressionsParser.NamespaceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.namespace"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamespace([NotNull] ExpressionsParser.NamespaceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.assignableValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignableValue([NotNull] ExpressionsParser.AssignableValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.assignableValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignableValue([NotNull] ExpressionsParser.AssignableValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.procedureCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProcedureCall([NotNull] ExpressionsParser.ProcedureCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.procedureCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProcedureCall([NotNull] ExpressionsParser.ProcedureCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCall([NotNull] ExpressionsParser.FunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCall([NotNull] ExpressionsParser.FunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.systemCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSystemCall([NotNull] ExpressionsParser.SystemCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.systemCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSystemCall([NotNull] ExpressionsParser.SystemCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgument([NotNull] ExpressionsParser.ArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgument([NotNull] ExpressionsParser.ArgumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentList([NotNull] ExpressionsParser.ArgumentListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentList([NotNull] ExpressionsParser.ArgumentListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.enumType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnumType([NotNull] ExpressionsParser.EnumTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.enumType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnumType([NotNull] ExpressionsParser.EnumTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.enumValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnumValue([NotNull] ExpressionsParser.EnumValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.enumValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnumValue([NotNull] ExpressionsParser.EnumValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.newInstance"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewInstance([NotNull] ExpressionsParser.NewInstanceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.newInstance"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewInstance([NotNull] ExpressionsParser.NewInstanceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] ExpressionsParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] ExpressionsParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.bracketedExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBracketedExpression([NotNull] ExpressionsParser.BracketedExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.bracketedExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBracketedExpression([NotNull] ExpressionsParser.BracketedExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.ifExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfExpression([NotNull] ExpressionsParser.IfExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.ifExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfExpression([NotNull] ExpressionsParser.IfExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.elseExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElseExpression([NotNull] ExpressionsParser.ElseExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.elseExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElseExpression([NotNull] ExpressionsParser.ElseExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.lambda"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambda([NotNull] ExpressionsParser.LambdaContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.lambda"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambda([NotNull] ExpressionsParser.LambdaContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.index"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIndex([NotNull] ExpressionsParser.IndexContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.index"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIndex([NotNull] ExpressionsParser.IndexContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.range"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRange([NotNull] ExpressionsParser.RangeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.range"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRange([NotNull] ExpressionsParser.RangeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValue([NotNull] ExpressionsParser.ValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValue([NotNull] ExpressionsParser.ValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.scopeQualifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScopeQualifier([NotNull] ExpressionsParser.ScopeQualifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.scopeQualifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScopeQualifier([NotNull] ExpressionsParser.ScopeQualifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] ExpressionsParser.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] ExpressionsParser.LiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.literalValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralValue([NotNull] ExpressionsParser.LiteralValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.literalValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralValue([NotNull] ExpressionsParser.LiteralValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.dataStructureDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDataStructureDefinition([NotNull] ExpressionsParser.DataStructureDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.dataStructureDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDataStructureDefinition([NotNull] ExpressionsParser.DataStructureDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.literalDataStructure"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralDataStructure([NotNull] ExpressionsParser.LiteralDataStructureContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.literalDataStructure"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralDataStructure([NotNull] ExpressionsParser.LiteralDataStructureContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.tupleDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTupleDefinition([NotNull] ExpressionsParser.TupleDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.tupleDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTupleDefinition([NotNull] ExpressionsParser.TupleDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.literalTuple"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralTuple([NotNull] ExpressionsParser.LiteralTupleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.literalTuple"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralTuple([NotNull] ExpressionsParser.LiteralTupleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.deconstructedTuple"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeconstructedTuple([NotNull] ExpressionsParser.DeconstructedTupleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.deconstructedTuple"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeconstructedTuple([NotNull] ExpressionsParser.DeconstructedTupleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.listDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterListDefinition([NotNull] ExpressionsParser.ListDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.listDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitListDefinition([NotNull] ExpressionsParser.ListDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.literalList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralList([NotNull] ExpressionsParser.LiteralListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.literalList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralList([NotNull] ExpressionsParser.LiteralListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.listDecomp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterListDecomp([NotNull] ExpressionsParser.ListDecompContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.listDecomp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitListDecomp([NotNull] ExpressionsParser.ListDecompContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.arrayDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayDefinition([NotNull] ExpressionsParser.ArrayDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.arrayDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayDefinition([NotNull] ExpressionsParser.ArrayDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.dictionaryDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDictionaryDefinition([NotNull] ExpressionsParser.DictionaryDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.dictionaryDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDictionaryDefinition([NotNull] ExpressionsParser.DictionaryDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.literalDictionary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralDictionary([NotNull] ExpressionsParser.LiteralDictionaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.literalDictionary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralDictionary([NotNull] ExpressionsParser.LiteralDictionaryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.kvp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKvp([NotNull] ExpressionsParser.KvpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.kvp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKvp([NotNull] ExpressionsParser.KvpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.literalKvp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralKvp([NotNull] ExpressionsParser.LiteralKvpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.literalKvp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralKvp([NotNull] ExpressionsParser.LiteralKvpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.unaryOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryOp([NotNull] ExpressionsParser.UnaryOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.unaryOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryOp([NotNull] ExpressionsParser.UnaryOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.binaryOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryOp([NotNull] ExpressionsParser.BinaryOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.binaryOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryOp([NotNull] ExpressionsParser.BinaryOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.arithmeticOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArithmeticOp([NotNull] ExpressionsParser.ArithmeticOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.arithmeticOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArithmeticOp([NotNull] ExpressionsParser.ArithmeticOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.logicalOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalOp([NotNull] ExpressionsParser.LogicalOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.logicalOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalOp([NotNull] ExpressionsParser.LogicalOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.conditionalOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionalOp([NotNull] ExpressionsParser.ConditionalOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.conditionalOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionalOp([NotNull] ExpressionsParser.ConditionalOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] ExpressionsParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] ExpressionsParser.TypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.dataStructureType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDataStructureType([NotNull] ExpressionsParser.DataStructureTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.dataStructureType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDataStructureType([NotNull] ExpressionsParser.DataStructureTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.genericSpecifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGenericSpecifier([NotNull] ExpressionsParser.GenericSpecifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.genericSpecifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGenericSpecifier([NotNull] ExpressionsParser.GenericSpecifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.tupleType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTupleType([NotNull] ExpressionsParser.TupleTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.tupleType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTupleType([NotNull] ExpressionsParser.TupleTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.typeList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeList([NotNull] ExpressionsParser.TypeListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.typeList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeList([NotNull] ExpressionsParser.TypeListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.funcType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFuncType([NotNull] ExpressionsParser.FuncTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.funcType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFuncType([NotNull] ExpressionsParser.FuncTypeContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}

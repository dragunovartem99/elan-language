//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Elan//Repository//Parser//Expressions.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ExpressionsParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IExpressionsListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.namespace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamespace([NotNull] ExpressionsParser.NamespaceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.namespace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamespace([NotNull] ExpressionsParser.NamespaceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.assignableValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignableValue([NotNull] ExpressionsParser.AssignableValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.assignableValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignableValue([NotNull] ExpressionsParser.AssignableValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.procedureCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedureCall([NotNull] ExpressionsParser.ProcedureCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.procedureCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedureCall([NotNull] ExpressionsParser.ProcedureCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] ExpressionsParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] ExpressionsParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.systemCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSystemCall([NotNull] ExpressionsParser.SystemCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.systemCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSystemCall([NotNull] ExpressionsParser.SystemCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument([NotNull] ExpressionsParser.ArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument([NotNull] ExpressionsParser.ArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] ExpressionsParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] ExpressionsParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.enumType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumType([NotNull] ExpressionsParser.EnumTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.enumType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumType([NotNull] ExpressionsParser.EnumTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.enumValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumValue([NotNull] ExpressionsParser.EnumValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.enumValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumValue([NotNull] ExpressionsParser.EnumValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.newInstance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewInstance([NotNull] ExpressionsParser.NewInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.newInstance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewInstance([NotNull] ExpressionsParser.NewInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] ExpressionsParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] ExpressionsParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.bracketedExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBracketedExpression([NotNull] ExpressionsParser.BracketedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.bracketedExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBracketedExpression([NotNull] ExpressionsParser.BracketedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.ifExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfExpression([NotNull] ExpressionsParser.IfExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.ifExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfExpression([NotNull] ExpressionsParser.IfExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.elseExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseExpression([NotNull] ExpressionsParser.ElseExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.elseExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseExpression([NotNull] ExpressionsParser.ElseExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.lambda"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambda([NotNull] ExpressionsParser.LambdaContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.lambda"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambda([NotNull] ExpressionsParser.LambdaContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.index"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndex([NotNull] ExpressionsParser.IndexContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.index"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndex([NotNull] ExpressionsParser.IndexContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.range"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRange([NotNull] ExpressionsParser.RangeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.range"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRange([NotNull] ExpressionsParser.RangeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue([NotNull] ExpressionsParser.ValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue([NotNull] ExpressionsParser.ValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.scopeQualifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScopeQualifier([NotNull] ExpressionsParser.ScopeQualifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.scopeQualifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScopeQualifier([NotNull] ExpressionsParser.ScopeQualifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] ExpressionsParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] ExpressionsParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.literalValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralValue([NotNull] ExpressionsParser.LiteralValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.literalValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralValue([NotNull] ExpressionsParser.LiteralValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.dataStructureDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDataStructureDefinition([NotNull] ExpressionsParser.DataStructureDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.dataStructureDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDataStructureDefinition([NotNull] ExpressionsParser.DataStructureDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.literalDataStructure"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralDataStructure([NotNull] ExpressionsParser.LiteralDataStructureContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.literalDataStructure"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralDataStructure([NotNull] ExpressionsParser.LiteralDataStructureContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.tupleDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTupleDefinition([NotNull] ExpressionsParser.TupleDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.tupleDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTupleDefinition([NotNull] ExpressionsParser.TupleDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.literalTuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralTuple([NotNull] ExpressionsParser.LiteralTupleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.literalTuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralTuple([NotNull] ExpressionsParser.LiteralTupleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.deconstructedTuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeconstructedTuple([NotNull] ExpressionsParser.DeconstructedTupleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.deconstructedTuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeconstructedTuple([NotNull] ExpressionsParser.DeconstructedTupleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.listDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListDefinition([NotNull] ExpressionsParser.ListDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.listDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListDefinition([NotNull] ExpressionsParser.ListDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.literalList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralList([NotNull] ExpressionsParser.LiteralListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.literalList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralList([NotNull] ExpressionsParser.LiteralListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.listDecomp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListDecomp([NotNull] ExpressionsParser.ListDecompContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.listDecomp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListDecomp([NotNull] ExpressionsParser.ListDecompContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.arrayDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayDefinition([NotNull] ExpressionsParser.ArrayDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.arrayDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayDefinition([NotNull] ExpressionsParser.ArrayDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.dictionaryDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictionaryDefinition([NotNull] ExpressionsParser.DictionaryDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.dictionaryDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictionaryDefinition([NotNull] ExpressionsParser.DictionaryDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.literalDictionary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralDictionary([NotNull] ExpressionsParser.LiteralDictionaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.literalDictionary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralDictionary([NotNull] ExpressionsParser.LiteralDictionaryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.kvp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKvp([NotNull] ExpressionsParser.KvpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.kvp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKvp([NotNull] ExpressionsParser.KvpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.literalKvp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralKvp([NotNull] ExpressionsParser.LiteralKvpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.literalKvp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralKvp([NotNull] ExpressionsParser.LiteralKvpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.unaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryOp([NotNull] ExpressionsParser.UnaryOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.unaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryOp([NotNull] ExpressionsParser.UnaryOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.binaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryOp([NotNull] ExpressionsParser.BinaryOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.binaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryOp([NotNull] ExpressionsParser.BinaryOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.arithmeticOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArithmeticOp([NotNull] ExpressionsParser.ArithmeticOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.arithmeticOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArithmeticOp([NotNull] ExpressionsParser.ArithmeticOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.logicalOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOp([NotNull] ExpressionsParser.LogicalOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.logicalOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOp([NotNull] ExpressionsParser.LogicalOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.conditionalOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalOp([NotNull] ExpressionsParser.ConditionalOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.conditionalOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalOp([NotNull] ExpressionsParser.ConditionalOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] ExpressionsParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] ExpressionsParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.dataStructureType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDataStructureType([NotNull] ExpressionsParser.DataStructureTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.dataStructureType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDataStructureType([NotNull] ExpressionsParser.DataStructureTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.genericSpecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericSpecifier([NotNull] ExpressionsParser.GenericSpecifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.genericSpecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericSpecifier([NotNull] ExpressionsParser.GenericSpecifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.tupleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTupleType([NotNull] ExpressionsParser.TupleTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.tupleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTupleType([NotNull] ExpressionsParser.TupleTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.typeList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeList([NotNull] ExpressionsParser.TypeListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.typeList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeList([NotNull] ExpressionsParser.TypeListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.funcType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncType([NotNull] ExpressionsParser.FuncTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.funcType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncType([NotNull] ExpressionsParser.FuncTypeContext context);
}

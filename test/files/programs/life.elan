# FFFF Elan Beta 2 valid

main
  print "Press any key to halt"
  var gr set to new BlockGraphics()
  set gr to gr.fill("", black, white)
  var grid set to empty [Boolean]
  call fillRandom(grid)
  var cont set to true
  while cont
    set gr to updateGraphics(grid, gr)
    call gr.draw()
    set grid to nextGeneration(grid)
    call pause(50)
    if gr.getKeystroke() isnt ""
      then
        set cont to false
    end if
  end while
end main

procedure fillRandom(out starter as [Boolean])
  for i from 0 to 1199 step 1
    call starter.append(random() > 0.5)
  end for
end procedure

function updateGraphics(grid as [Boolean], gr as BlockGraphics) return BlockGraphics
  var gr2 set to gr
  for row from 0 to 29 step 1
    for col from 0 to 39 step 1
      var cell set to grid[row*40 + col]
      var colour set to if cell then black else white
      set gr2 to gr2.putBackground(col, row, colour)
    end for
  end for
  return gr2
end function

function n(c as Int) return Int
  return if c > 39 then c - 40 else c + 1160
end function

function s(c as Int) return Int
  return if c < 1160 then c + 40 else c - 1160
end function

function e(c as Int) return Int
  return if mod(c, 40) < 39 then c + 1 else c - 39
end function

function w(c as Int) return Int
  return if mod(c, 40) > 0 then c - 1 else c + 39
end function

function neighbourCells(c as Int) return [Int]
  return [n(w(c)), n(c), n(e(c)), w(c), e(c), s(w(c)), s(c), s(e(c))]
end function

function liveNeighbours(cells as [Boolean], c as Int) return Int
  let neighbours be neighbourCells(c)
  let live be neighbours.filter(lambda i as Int => cells[i])
  return live.length()
end function

function willLive(currentlyAlive as Boolean, liveNeighbours as Int) return Boolean
  return if currentlyAlive then (liveNeighbours > 1) and (liveNeighbours < 4) else liveNeighbours is 3
end function

function nextCellValue(cells as [Boolean], c as Int) return Boolean
  return willLive(cells[c], liveNeighbours(cells, c))
end function

function nextGeneration(cells as [Boolean]) return [Boolean]
  let cellRange be range(0, cells.length() - 1)
  let next be cellRange.map(lambda n as Int => nextCellValue(cells, n))
  return next.asArray()
end function

constant black set to 0x000000

constant white set to 0xffffff

test north
  assert n(90) is 50
  assert n(39) is 1199
  assert n(0) is 1160
  assert n(40) is 0
end test

test south
  assert s(90) is 130
  assert s(39) is 79
  assert s(1160) is 0
  assert s(1199) is 39
end test

test east
  assert e(90) is 91
  assert e(39) is 0
  assert e(40) is 41
  assert e(1199) is 1160
end test

test 
  assert w(90) is 89
  assert w(39) is 38
  assert w(0) is 39
  assert w(1160) is 1199
end test

test north_east
  assert n(e(90)) is 51
  assert n(e(0)) is 1161
  assert n(e(39)) is 1160
  assert n(e(1160)) is 1121
  assert n(e(1199)) is 1120
end test

test 
  assert s(e(90)) is 131
  assert s(e(0)) is 41
  assert s(e(39)) is 40
  assert s(e(1160)) is 1
  assert s(e(1199)) is 0
end test

test 
  assert n(w(90)) is 49
  assert n(w(0)) is 1199
  assert n(w(39)) is 1198
  assert n(w(1160)) is 1159
  assert n(w(1199)) is 1158
end test

test 
  assert s(w(90)) is 129
  assert s(w(0)) is 79
  assert s(w(39)) is 78
  assert s(w(1160)) is 39
  assert s(w(1199)) is 38
end test

test 
  assert neighbourCells(90) is {49, 50, 51, 89, 91, 129, 130, 131}
end test

test 
  assert willLive(false, 0) is false
  assert willLive(false, 1) is false
  assert willLive(false, 2) is false
  assert willLive(false, 3) is true
  assert willLive(false, 4) is false
  assert willLive(false, 5) is false
  assert willLive(false, 6) is false
  assert willLive(false, 7) is false
  assert willLive(false, 8) is false
  assert willLive(true, 0) is false
  assert willLive(true, 1) is false
  assert willLive(true, 2) is true
  assert willLive(true, 3) is true
  assert willLive(true, 4) is false
  assert willLive(true, 5) is false
  assert willLive(true, 6) is false
  assert willLive(true, 7) is false
  assert willLive(true, 8) is false
end test

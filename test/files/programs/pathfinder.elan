# FFFF Elan Beta 1 valid

main

end main

function nodeExists(p as Point) return Boolean
  return nodes.contains(p)
end function

function pointsAreAdjacentDiagonally(p1 as Point, p2 as Point) return Boolean
  return (abs(p1.x - p2.x) is 1) and (abs(p1.y - p2.y) is 1)
end function

# Assumes that it will only be called if the points ARE immediate neighbours
function findEdge(p1 as Point, p2 as Point) return Float
  return p1.distanceFrom(p2)
end function

# Returns a list of nodes that can be reached from the specified node
function neighbours(p as Point) return [Point]
  let l1 be [new Point(p.x, p.y - 1), new Point(p.x + 1, p.y - 1), new Point(p.x + 1, p.y), new Point(p.x + 1, p.y + 1), new Point(p.x, p.y + 1), new Point(p.x - 1, p.y + 1), new Point(p.x - 1, p.y), new Point(p.x - 1, p.y - 1)]
  let l2 be l1.filter(lambda n as Point => nodeExists(n))
  return l2.asImmutableList()
end function

# Returns a list of nodes, from source to destination, representing the shortest path, using dijkstra's algorithm
# You may make use of existing methods such a s Neignbours, or findEdge.
procedure shortestPath(source as Point, destination as Point, alg as Algorithm, x as [Point])
  # Initialise the 'table' with three 'columns' - one 'row' per node
  var visited set to newDictionaryOfAllPointsReturningFalseValues()
  var costFromSource set to  newDictionaryOfAllPointsReturningDoublesSetToInfinity()
  var via set to newDictionaryOfAllPointsReturningNull()
  # Set start
  var currentNode set to source
  set costFromSource to costFromSource.setItem(currentNode, 0)
  # Iterate until shortest path found
  while currentNode isnt destination
    set visited to visited.setItem(currentNode,true)
    call updateCostAndViaOfEachNeighbourIfApplicable(costFromSource, via, currentNode, destination)
    set currentNode to nextNodeToVisit(currentNode, visited, costFromSource, destination, alg)
    if costFromSource[currentNode] is infinity
      then
        throw "Cannot reach destination -  graph is 'disconnected'"
    end if
  end while
  set route to retraceRoute(destination, source, via)
end procedure

function newDictionaryOfAllPointsReturningNull() return [Point:Point]
  var dict set to empty [Point:Point]
  each p in nodes
    set dict[p] to empty Point
  end each
  return dict
end function

function newDictionaryOfAllPointsReturningDoublesSetToInfinity() return [Point:Float]
  var dict set to empty [Point:Float]
  each p in nodes
    set dict[p] to infinity
  end each
  return dict
end function

function newDictionaryOfAllPointsReturningFalseValues() return [Point:Boolean]
  var dict set to empty [Point:Boolean]
  each p in nodes
    set dict to dict.setItem(p, false)
  end each
  return dict
end function

  # needs converting to a function as dictionaries are immutable 
procedure updateCostAndViaOfEachNeighbourIfApplicable(costFromSource as [Point:Float], via as [Point:Point],  currentNode as Point,  destination as Point)
  each neighbour in neighbours(currentNode)
    var newCost set to costFromSource[currentNode] + findEdge(currentNode, neighbour)
    if newCost < costFromSource[neighbour]
      then
        # Wrong -  don't update cost to estimate -  update to actual. Use estimate to choose the lowest cost unvisited node only. 
        set costFromSource[neighbour] to newCost
        set via[neighbour] to currentNode
    end if
  end each
end procedure

function estimatedCostToDestination(current as Point, destination as Point) return Float
  return sqrt((current.x - destination.x)^2 + (current.y - destination.y)^2)
end function

function nextNodeToVisit(currentNode as Point, visited as [Point:Boolean], costFromSource as [Point:Float], destination as Point, alg as Algorithm) return Point
  var lowestCostSoFar set to infinity
  var lowestCostNode set to nodes.element(0)
  var possibilities set to nodes.filter(lambda n as Point => (not visited[n]) and (costFromSource[n] < infinity))
  each p in possibilities
    var cost set to 0.0
    switch alg
      case Algorithm.dijkstra
        set cost to costFromSource[p]
      case Algorithm.optimistic
        set cost to estimatedCostToDestination(p, destination)
      case Algorithm.aStar
        set cost to costFromSource[p] + estimatedCostToDestination(p, destination)
    end switch
    if cost < lowestCostSoFar
      then
        set lowestCostSoFar to cost
        set lowestCostNode to p
    end if
  end each
  return lowestCostNode
end function 

function retraceRoute(destination as Point, source as Point, via as [Point:Point]) return [Point]
  var result set to [destination]
  var currentNode set to destination
  while currentNode isnt source
    var previous set to via[currentNode]
    set result to result.insert(0, previous)
    set currentNode to previous
  end while
  return result
end function

function sumOfEdges(route as [Point]) return Float
  var result set to 0.0
  var stage set to 0
  while stage < route.length() - 1
    set result to result + findEdge(route[stage], route[stage + 1])
    set stage to stage + 1
  end while
  return result
end function

immutable class Point
  constructor(x as Int, y as Int)
    set property.x to x
    set property.y to y
  end constructor

  property x as Int

  property y as Int

  function distanceFrom(p2 as Point) return Float
    return sqrt((p2.x - x)^2 + (p2.y - y)^2)
  end function

end class

enum Algorithm
  dijkstra, optimistic, aStar
end enum

# big enough for this purpose
constant infinity set to 1000000

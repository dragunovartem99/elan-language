# 453360036e8bb8d49eeaa26fb279d60d4bb7945a9586b5819d9f11391c514b6a Elan Beta 2 valid

# Demo shows one way to implement a mergeSort function - using recursion
# Since merge sort is always an 'out of place' sort, we have chosen to use immutable lists
# It could be written with mutable lists, but the code for the merge function would need changing
main
  var li set to {"plum", "apricot", "lime", "lemon", "melon", "apple", "orange", "strawberry", "pear"}
  print mergeSort(li)
end main

function mergeSort(li as {String}) return {String}
  var result set to li
  let len be li.length()
  if len > 1
    then
      let mid be floor(len/2)
      let frontHalf be mergeSort(li[0..mid])
      let backHalf be mergeSort(li[mid..len])
      set result to merge(frontHalf, backHalf)
  end if
  return result
end function

function merge(a as {String}, b as {String}) return {String}
  var result set to empty {String}
  let aLen be a.length()
  let bLen be b.length()
  if a.length() is 0
    then
      set result to b
    else if bLen is 0
      set result to a
    else if isBefore(a[0], b[0])
      set result to {a[0]} + merge(a[1..aLen], b)
    else
      set result to {b[0]} + merge(a, b[1..bLen])
  end if
  return result
end function

test mergeSort
  let li1 be empty {String}
  assert mergeSort(li1) is li1
  let li2 be {"plum"}
  assert mergeSort(li2) is li2
  let li3 be {"plum", "apricot", "lime", "lemon", "melon", "apple", "orange", "strawberry", "pear"}
  let sorted3 be {"apple", "apricot", "lemon", "lime", "melon", "orange", "pear", "plum", "strawberry"}
  assert mergeSort(li3) is sorted3
  let li4 be {"plum", "apricot", "lime", "lemon", "melon", "apple", "orange", "strawberry"}
  let sorted4 be {"apple", "apricot", "lemon", "lime", "melon", "orange", "plum", "strawberry"}
  assert mergeSort(li4) is sorted4
  let li5 be {"apple", "apricot", "lemon", "lime", "melon", "orange", "pear", "strawberry"}
  assert mergeSort(li5) is li5
end test

# FFFF Elan Beta 1 valid

main
  var game set to new Game(createRandom())
  while game.isOn
    var gr set to game.graphics
    call gr.draw()
    call pause(150)
    set game to clockTick(game, gr.getKeystroke()) 
  end while
  print "Game Over! Score: {score(game)}"
end main

function clockTick(game as Game, k as String) return Game 
  let g2 be copy game with key to k
  let g3 to moveSnake(g2, currentDirection)
  # prior tail needs to be set
  let g4 be if g3.head is g3.apple then moveApple(g3) else copy g3 with body to body[1..]
  let g5 be updateGraphics(g4)
  return g5
end function

function updateGraphics(g as Game) return Game
  let gr be g.graphics
  let apple be g.apple
  let g2 be copy g with graphics to gr.putBackground(apple.x, apple.y, red) 
  let gr2 be g2.graphics
  let head be g2.head
  let g3 be copy g2 with graphics to gr2.putBackground(head.x, head.y, green)
  let body be g3.body
  let tail be body.getAt(0)
  let tailColour be if tail is g2.priorTail then green else white
  let gr3 be g3.graphics
  return copy g3 with graphics to gr3.putBackground(tail.x, tail.y, tailColour)
end function

function moveApple(g as Game) return Game
  let rnd1 be g.rnd
  let rndX be rnd1.nextInt(0, 39)
  let rnd2 be rndx.random()
  let rndY be rnd2.nextInt(0, 29)
  let newApple be new Square(rndX.value(), rndY.value())
  let g2 copy g with apple to newApple, rnd to rndY.random()
  let body be g2.body
  return if body.contains(g2.apple) then moveApple(g2) else g2
end function

function score(game as Game) as Int
  let body be game.body
  return body.length() -1
end function

function moveSnake(game as Game) as Game 
  let body be game.body
  let head be game.head
  let key be game.key
  let newX be if key is "a" then sq.x - 1 else if key is "d" then sq.x + 1 else sq.x
  let newY be if key is "w" then sq.y - 1 else if key is "s" then sq.y + 1 else sq.y
  return  copy game with priorTail to body.getAt(0), body to body + head, head to new Square(newX, newY)
end function

function gameOver(game as Game) return Boolean
  let body be game.body
  return body.contains(game.head) or headIsAtEdge(game)
end function

function headIsAtEdge(game as Game) return Boolean
  let head be game.head
  return (head.x is -1) or (head.y is -1) or (head.x is 40) or (head.y is 30)
end function

immutable class Game
  constructor(rnd as Random)
    set graphics to new Graphics()
    var tail set to new Square(20, 15)
    set head to tail.getAdjacentSquare(Direction.right)
    set priorTail to tail
    set body to {tail, head}
    set apple to new Square(20, 10)
    set isOn to true
    set property rnd to rnd
    set currentDir to Direction.right
  end constructor

  property head as Square

  property body as {Square}

  property priorTail as Square

  property apple as Square

  property isOn as Boolean

  property rnd as Random

  property graphics as Graphics

  property key as String

end class

immutable class Square
  constructor(x as Int, y as int)
    set property.x to x
    set property.y to y
  end constructor

  property x as Int

  property y as Int

end class

constant green set to 0x00ff00

constant red set to 0xff0000

constant white set to 0xffffff

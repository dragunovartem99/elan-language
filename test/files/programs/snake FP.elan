# 7405e6d61dfd39b27ad6e8052dad99d927543160b4e6764c948ca6cc70d56404 Elan Beta 2 valid

# Run the program and use the standard W,A,S,D keys to change Snake direction
# Try to 'eat' the (red) apples, and avoid hitting the edge or the body of the snake.
main
  var game set to new Game(firstRandom())
  while game.isOn
    set game to updateGraphics(game)
    var gr set to game.graphics
    call gr.draw()
    call pause(150)
    set game to clockTick(game, gr.getKeystroke())
  end while
  print "Game Over! Score: {score(game)}"
end main

function clockTick(g as Game, k as String) return Game
  let g2 be if k is "" then g else copy g with key to k
  let g3 be moveSnake(g2)
  let g4 be eatAppleOrNot(g3)
  return if gameOver(g4) then copy g4 with isOn to false else g4
end function

function updateGraphics(g as Game) return Game
  let gr1 be g.graphics.putBackground(g.apple.x, g.apple.y, red)
  let g2 be copy g with graphics to gr1
  let gr2 be g2.graphics.putBackground(g2.head.x, g2.head.y, green)
  let g3 be copy g2 with graphics to gr2
  let tail be g3.body.get(0)
  let tailColour be if tail is g3.priorTail then green else white
  let gr3 be g3.graphics.putBackground(tail.x, tail.y, tailColour)
  return copy g3 with graphics to gr3
end function

function moveApple(g as Game) return Game
  let x be g.rnd.valueInt(0, 39)
  let rnd2 be g.rnd.next()
  let y be rnd2.valueInt(0, 29)
  let newApple be new Square(x, y)
  let rndNext be rnd2.next()
  return copy g with apple to newApple, rnd to rndNext
end function

function score(g as Game) return Int
  let body be g.body
  return body.length() - 2
end function

function moveSnake(g as Game) return Game
  let head be g.head
  let k be g.key
  let x be head.x
  let y be head.y
  let newX be if k is "a" then x - 1 else if k is "d" then x + 1 else x
  let newY be if k is "w" then y - 1 else if k is "s" then y + 1 else y
  let currentTail be g.body.get(0)
  let newHead be new Square(newX, newY)
  let newBody be g.body + g.head
  return copy g with body to newBody, head to newHead
end function

function eatAppleOrNot(g as Game) return Game
  let currentTail be g.body.get(0)
  let bodyMinusTail be g.body.getRange(1, g.body.length())
  return if g.head is g.apple then moveApple(g) else copy g with priorTail to currentTail, body to bodyMinusTail
end function

function gameOver(g as Game) return Boolean
  return bodyOverlaps(g, g.head) or headIsAtEdge(g)
end function

function headIsAtEdge(g as Game) return Boolean
  let head be g.head
  return (head.x is -1) or (head.y is -1) or (head.x is 40) or (head.y is 30)
end function

function bodyOverlaps(g as Game, target as Square) return Boolean
  let body be g.body
  return body.any(lambda s as Square => s is target)
end function

immutable class Game
  constructor(rnd as Random)
    set property.graphics to new Graphics()
    set property.head to new Square(22, 15)
    set property.priorTail to empty Square
    set property.body to {new Square(20, 15), new Square(21, 15)}
    set property.apple to new Square(10, 10)
    set property.isOn to true
    set property.key to "d"
    set property.rnd to rnd
  end constructor

  property head as Square

  property body as {Square}

  property priorTail as Square

  property apple as Square

  property isOn as Boolean

  property rnd as Random

  property graphics as Graphics

  property key as String

end class

immutable class Square
  constructor(x as Int, y as Int)
    set property.x to x
    set property.y to y
  end constructor

  property x as Int

  property y as Int

end class

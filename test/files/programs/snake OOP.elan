# 044b397b3975fad3a4761d2a2954dcfb1575c455e9c12fda662dbac736859379 Elan Beta 1 valid

# Run the program and use the standard W,A,S,D keys to change Snake direction
# Try to 'eat' as many (red) apples, and avoid hitting the edge or the body of the snake.
main
  var gr set to new Graphics()
  var snake set to new Snake()
  var apple set to new Apple()
  call apple.newRandomPosition(snake)
  while not snake.gameOver()
    set gr to snake.updateGraphics(gr)
    set gr to apple.updateGraphics(gr)
    call gr.draw()
    call pause(150)
    call snake.clockTick(gr.getKeystroke(), apple)
  end while
  print "Game Over! Score: {snake.length() - 1}"
end main

class Snake
  constructor()
    var tail set to new Square(20, 15)
    set currentDir to Direction.right
    set body to [tail]
    set head to tail.getAdjacentSquare(currentDir)
    set priorTail to tail
  end constructor

  property currentDir as Direction

  property head as Square

  property body as [Square]

  property priorTail as Square

  procedure setDirection(key as String)
    switch key
      case "w"
        set currentDir to Direction.up
      case "s"
        set currentDir to Direction.down
      case "a"
        set currentDir to Direction.left
      case "d"
        set currentDir to Direction.right
    end switch
  end procedure

  procedure clockTick(key as String, apple as Apple)
    call setDirection(key)
    set priorTail to body[0]
    call body.add(head)
    set head to head.getAdjacentSquare(currentDir)
    if head is apple.location
      then
        call apple.newRandomPosition(this)
      else
        set body to body[1..]
    end if
  end procedure

  function length() return Int
    return body.length()
  end function

  function gameOver() return Boolean
    return bodyCovers(head) or head.isAtEdge()
  end function

  function bodyCovers(sq as Square) return Boolean
    var result set to false
    each seg in body
      if (seg is sq)
        then
          set result to true
      end if
    end each
    return result
  end function

  function updateGraphics(gr as Graphics) return Graphics
    var gr2 set to gr.putBackground(head.x, head.y, green)
    if body[0] isnt priorTail
      then
        set gr2 to gr2.putBackground(priorTail.x, priorTail.y, white)
    end if
    return gr2
  end function

end class

class Apple
  constructor()

  end constructor

  property location as Square

  procedure newRandomPosition(snake as Snake)
    repeat
      var ranX set to randomInt(0, 39)
      var ranY set to randomInt(0, 29)
      set location to new Square(ranX, ranY)
    end repeat when not snake.bodyCovers(location)
  end procedure

  function updateGraphics(gr as Graphics) return Graphics
    return gr.putBackground(location.x, location.y, red)
  end function

end class

class Square
  constructor(x as Int, y as Int)
    set property.x to x
    set property.y to y
  end constructor

  property x as Int

  property y as Int

  function getAdjacentSquare(d as Direction) return Square
    var newX set to x
    var newY set to y
    switch d
      case Direction.left
        set newX to x - 1
      case Direction.right
        set newX to x + 1
      case Direction.up
        set newY to y - 1
      case Direction.down
        set newY to y + 1
    end switch
    return new Square(newX, newY)
  end function

  function isAtEdge() return Boolean
    return (x is -1) or (y is -1) or (x is 40) or (y is 30)
  end function

end class

enum Direction
  up, down, left, right
end enum

constant green set to 0x00ff00

constant red set to 0xff0000

constant white set to 0xffffff

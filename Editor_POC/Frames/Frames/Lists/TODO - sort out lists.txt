TODO - lose the concept of a field. It's all just Frames, though with Compound and Simple as sub-classes with generic behaviour.

A frame must be able to deal with input of complete text, must be able to render itself as text, know its extent,
know where the cursor is in its text, or any sub-frames, know its parent and children, and how to deal with cursor going beyond
its limits (i.e. back to parent).

A leaf frame just accepts text based on whether it fits a parse rule.

So, could have an interface for a leaf frame. Or, better, could have a compound frame, and simple frame as sub-classes of Frame.

Could also treat all units of fixed text (i.e. where a unit is the the text between sub-frames) as leaf frames, which know how
to move cursor, and accept matching text. 

With ALL characters in the code (fixed and entered) accounted for by a single frame, and all frames knowing their extent,
their parent and any children, it is possible to get from a cursor position to a position within a frame. 

Must also know if cursor is at a boundary between frames e.g to deal with insertion/deletion.

Each knows what to do with entered text, cursor movements, and right click commands. 

Main abstract types of Frame

- Fixed text (combination of keywords, punctuation, spaces & newlines)
- Entered text only - Identifier, Type,LiteralString?
- Compound - contains more than one of the above and/or further frames


Sub-types
- Generally have similar names to grammar rules e.g. function, class, variableDef
- Usually final (in C#) but some e.g. Function may be sub-classed as e.g. FunctionMethod

Properties of a frame
- Optional


Responsibilities of a frame ? 
- Know its sub-frames and super-frame as appropriate
- Know if it can be moved/deleted
- Know its extent (row, cols? or just charCount?)
- Know if it has focus, and if so the position of the cursor (line, col, or just charNo?) within it.
- Know whether it can be moved and/or deleted
- If cursor is moved over a sub-frame, transfer focus to the sub-frame
- If cursor is moved before first or after last sub-frame, transfer focus to super-frame
- If cursor is between sub-frames,know whether (and which) sub-frames may be inserted - 
  including ability to select option based on text entered so far or hold text until intent is clear.
  (Maybe for latter case there should be an abstract selector frame, which is replaced by concrete)
- Important - distinguish between an Enter that navigates from an Enter that inserts
  This is not going to be easy: e.g. on initial text entry, is user inserting a new statement
  or intending to write the 'end'. Can't know until start typing. If they type end then skip there.
  Same for optional clauses like else, else if, case.
  ? Reintroduce StatementBlock as a frame - since re-used in multiple contexts - but with
  different options incl. sub-clauses and end (esp if typing whole code)
- Respond to all keystrokes incl. Tab, Enter, Cursor keys
- Direct focus to subframe or superframe based on cursor position

A list can be a list of a single type of parsed field, with separator e.g. argument list

Statement list
Existing statements are held as a list of Statement Frames, with a method to render them as a single string. 
The owning object detects an Enter (newline) at start/end of any statement frame. and inserts as StatementField.
The statementField offers right click options or when typed text matchesand just one type of possible statement in
the context, inserts that statement frame, with cursor put in suitable position and text added to field(s) within statement
as appropriate.

Member list should work like statement list

Argument list
Works the same as above

